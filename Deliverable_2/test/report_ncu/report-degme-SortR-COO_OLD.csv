"ID","Process ID","Process Name","Host Name","thread Domain:Push/Pop_Range:PL_Type:PL_Value:CLR_Type:Color:Msg_Type:Msg","Id:Domain:Start/Stop_Range:PL_Type:PL_Value:CLR_Type:Color:Msg_Type:Msg","Kernel Name","Context","Stream","Block Size","Grid Size","Device","CC","Section Name","Metric Name","Metric Unit","Metric Value","Rule Name","Rule Type","Rule Description","Estimated Speedup Type","Estimated Speedup"
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.21",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","929.95",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","644,435",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","48.75",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","16.82",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","692.96",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","49.09",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","18.80",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","639,958.62",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","61.47",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","OPT","Compute is more heavily utilized than Memory: Look at the Compute Workload Analysis section to see what the compute pipelines are spending their time doing. Also, consider whether any computation is redundant and could be reduced or moved to look-up tables.","",""
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","PM Sampling","Maximum Buffer Size","Mbyte","3.67",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","PM Sampling","Dropped Samples","sample","0",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","PM Sampling","Maximum Sampling Interval","cycle","80,000",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","PM Sampling","# Pass Groups","","4",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","2.47",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","2.46",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","61.90",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","2.48",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","61.90",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FMA is the highest-utilized pipeline (39.3%) based on active cycles, taking into account the rates of its different instructions. It executes 32-bit floating point (FADD, FMUL, FMAD, ...) and integer (IMUL, IMAD) operations. It is well-utilized, but should not be a bottleneck.","",""
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","156.93",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","48.75",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","43.41",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","20.95",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","51.39",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","43.41",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 15.6 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","25"
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","62.00",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.62",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","38.00",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.56",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.93",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","12.19",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","12.20",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","3.77",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","3.50",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","WarpStateStats","","","","ThreadDivergence","OPT","Instructions are executed in warps, which are groups of 32 threads. Optimal instruction throughput is achieved if all 32 threads of a warp execute the same instruction. The chosen launch configuration, early thread completion, and divergent flow control can significantly lower the number of active threads in a warp per cycle. This kernel achieves an average of 3.8 threads being active per cycle. This is further reduced to 3.5 threads per warp due to predication. The compiler may use predication to avoid an actual branch. Instead, all instructions are scheduled, but a per-thread condition code or predicate controls which threads execute the instructions. Try to avoid different execution paths within a warp when possible.","global","54.75"
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","395,767.01",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","88,651,811",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","396,116.34",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","88,730,061",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","OPT","This kernel executes 0 fused and 6643360 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","19.67"
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Launch Statistics","Block Size","","32",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Launch Statistics","Grid Size","","253,986",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","16",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","65.54",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","256",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Launch Statistics","# SMs","SM","56",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Launch Statistics","Threads","thread","8,127,552",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Launch Statistics","Uses Green Context","","0",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","141.73",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","128",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","51",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","64",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","47.36",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","30.31",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Occupancy","","","","TheoreticalOccupancy","OPT","The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. This kernel's theoretical occupancy (50.0%) is limited by the number of blocks that can fit on the SM.","local","50"
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","141,600.67",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","20,204,544",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","639,958.62",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","36,087,534",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","613,373.79",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","29,935,152",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","639,958.62",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","36,087,534",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","638,939.93",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","144,350,136",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.17",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","15,082,882",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","96.76",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","1,936.00",
"0","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 4299432 excessive sectors (50% of the total 8617182 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","49.07"
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.21",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","929.95",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","645,385",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","48.67",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","16.80",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","693.98",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","49.08",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","18.79",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","640,053",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","61.38",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","OPT","Compute is more heavily utilized than Memory: Look at the Compute Workload Analysis section to see what the compute pipelines are spending their time doing. Also, consider whether any computation is redundant and could be reduced or moved to look-up tables.","",""
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","PM Sampling","Maximum Buffer Size","Kbyte","524.29",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","PM Sampling","Dropped Samples","sample","0",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","PM Sampling","Maximum Sampling Interval","cycle","20,000",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","PM Sampling","# Pass Groups","","4",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","2.47",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","2.45",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","61.89",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","2.48",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","61.89",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FMA is the highest-utilized pipeline (39.3%) based on active cycles, taking into account the rates of its different instructions. It executes 32-bit floating point (FADD, FMUL, FMAD, ...) and integer (IMUL, IMAD) operations. It is well-utilized, but should not be a bottleneck.","",""
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","156.71",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","48.67",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","43.34",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","20.93",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","51.41",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","43.34",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 15.6 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","24.96"
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","62.00",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.62",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","38.00",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.56",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.93",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","12.19",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","12.20",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","3.77",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","3.50",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","WarpStateStats","","","","ThreadDivergence","OPT","Instructions are executed in warps, which are groups of 32 threads. Optimal instruction throughput is achieved if all 32 threads of a warp execute the same instruction. The chosen launch configuration, early thread completion, and divergent flow control can significantly lower the number of active threads in a warp per cycle. This kernel achieves an average of 3.8 threads being active per cycle. This is further reduced to 3.5 threads per warp due to predication. The compiler may use predication to avoid an actual branch. Instead, all instructions are scheduled, but a per-thread condition code or predicate controls which threads execute the instructions. Try to avoid different execution paths within a warp when possible.","global","54.67"
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","395,767.01",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","88,651,811",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","396,116.38",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","88,730,069",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","OPT","This kernel executes 0 fused and 6643360 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","19.66"
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Launch Statistics","Block Size","","32",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Launch Statistics","Grid Size","","253,986",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","16",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","65.54",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","256",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Launch Statistics","# SMs","SM","56",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Launch Statistics","Threads","thread","8,127,552",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Launch Statistics","Uses Green Context","","0",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","141.73",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","128",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","51",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","64",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","47.35",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","30.30",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Occupancy","","","","TheoreticalOccupancy","OPT","The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. This kernel's theoretical occupancy (50.0%) is limited by the number of blocks that can fit on the SM.","local","50"
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","141,610",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","20,234,752",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","640,053",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","36,140,902",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","613,129.90",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","29,979,312",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","640,053",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","36,140,902",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","638,924.38",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","144,563,608",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.17",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","15,082,882",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","96.76",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","1,936.00",
"1","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 4299432 excessive sectors (50% of the total 8617182 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","48.98"
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.21",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","929.98",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","645,525",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","48.66",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","16.79",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","694.11",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","49.07",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","18.76",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","640,131.68",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","61.36",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","OPT","Compute is more heavily utilized than Memory: Look at the Compute Workload Analysis section to see what the compute pipelines are spending their time doing. Also, consider whether any computation is redundant and could be reduced or moved to look-up tables.","",""
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","PM Sampling","Maximum Buffer Size","Mbyte","3.60",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","PM Sampling","Dropped Samples","sample","0",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","PM Sampling","Maximum Sampling Interval","cycle","80,000",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","PM Sampling","# Pass Groups","","4",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","2.47",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","2.45",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","61.88",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","2.48",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","61.88",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FMA is the highest-utilized pipeline (39.3%) based on active cycles, taking into account the rates of its different instructions. It executes 32-bit floating point (FADD, FMUL, FMAD, ...) and integer (IMUL, IMAD) operations. It is well-utilized, but should not be a bottleneck.","",""
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","156.70",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","48.66",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","43.34",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","20.93",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","51.44",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","43.34",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 15.6 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","24.96"
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","61.99",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.62",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","38.01",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.56",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.93",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","12.19",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","12.20",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","3.77",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","3.50",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","WarpStateStats","","","","ThreadDivergence","OPT","Instructions are executed in warps, which are groups of 32 threads. Optimal instruction throughput is achieved if all 32 threads of a warp execute the same instruction. The chosen launch configuration, early thread completion, and divergent flow control can significantly lower the number of active threads in a warp per cycle. This kernel achieves an average of 3.8 threads being active per cycle. This is further reduced to 3.5 threads per warp due to predication. The compiler may use predication to avoid an actual branch. Instead, all instructions are scheduled, but a per-thread condition code or predicate controls which threads execute the instructions. Try to avoid different execution paths within a warp when possible.","global","54.66"
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","395,767.01",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","88,651,811",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","396,116.36",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","88,730,064",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","OPT","This kernel executes 0 fused and 6643360 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","19.66"
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Launch Statistics","Block Size","","32",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Launch Statistics","Grid Size","","253,986",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","16",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","65.54",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","256",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Launch Statistics","# SMs","SM","56",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Launch Statistics","Threads","thread","8,127,552",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Launch Statistics","Uses Green Context","","0",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","141.73",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","128",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","51",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","64",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","47.34",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","30.30",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Occupancy","","","","TheoreticalOccupancy","OPT","The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. This kernel's theoretical occupancy (50.0%) is limited by the number of blocks that can fit on the SM.","local","50"
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","141,624.17",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","20,238,848",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","640,131.68",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","36,148,630",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","613,048.31",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","29,985,696",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","640,131.68",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","36,148,630",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","638,966.29",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","144,594,520",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.17",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","15,082,882",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","96.76",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","1,936.00",
"2","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(253986, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 4299432 excessive sectors (50% of the total 8617182 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","48.96"
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.21",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","929.94",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","487,596",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","63.52",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","22.23",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","524.32",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","63.87",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","24.21",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","484,921.23",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","81.48",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","INF","The kernel is utilizing greater than 80.0% of the available compute or memory performance of the device. To further improve performance, work will likely need to be shifted from the most utilized to another unit. Start by analyzing workloads in the Compute Workload Analysis section.","",""
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","PM Sampling","Maximum Buffer Size","Mbyte","3.67",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","PM Sampling","Dropped Samples","sample","0",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","PM Sampling","Maximum Sampling Interval","cycle","80,000",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","PM Sampling","# Pass Groups","","4",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","3.28",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","3.26",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","81.93",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","3.28",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","81.93",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FMA is the highest-utilized pipeline (52.5%) based on active cycles, taking into account the rates of its different instructions. It executes 32-bit floating point (FADD, FMUL, FMAD, ...) and integer (IMUL, IMAD) operations. It is well-utilized, but should not be a bottleneck.","",""
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","207.39",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","63.52",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","57.75",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","25.58",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","49.16",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","57.75",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 15.6 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","32.57"
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","82.09",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.82",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","17.91",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","11.38",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","2.06",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","13.86",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","13.87",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","3.76",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","3.48",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","WarpStateStats","","","","ThreadDivergence","OPT","Instructions are executed in warps, which are groups of 32 threads. Optimal instruction throughput is achieved if all 32 threads of a warp execute the same instruction. The chosen launch configuration, early thread completion, and divergent flow control can significantly lower the number of active threads in a warp per cycle. This kernel achieves an average of 3.8 threads being active per cycle. This is further reduced to 3.5 threads per warp due to predication. The compiler may use predication to avoid an actual branch. Instead, all instructions are scheduled, but a per-thread condition code or predicate controls which threads execute the instructions. Try to avoid different execution paths within a warp when possible.","global","72.61"
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","397,088.50",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","88,947,823",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","397,285.22",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","88,991,889",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","OPT","This kernel executes 0 fused and 6729534 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","26.24"
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Launch Statistics","Block Size","","64",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Launch Statistics","Grid Size","","126,993",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","16",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","65.54",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","512",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Launch Statistics","# SMs","SM","56",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Launch Statistics","Threads","thread","8,127,552",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Launch Statistics","Uses Green Context","","0",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","70.87",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","64",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","42",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","32",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","64",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","100",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","71.23",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","45.59",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Occupancy","","","","AchievedOccupancy","OPT","The difference between calculated theoretical (100.0%) and measured achieved occupancy (71.2%) can be the result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy.","local","28.77"
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","141,586.50",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","15,287,296",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","484,921.23",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","27,304,732",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","457,295.06",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","22,649,712",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","484,921.23",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","27,304,732",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","483,968.58",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","109,218,928",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.17",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","14,900,336",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","98.39",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","969.42",
"3","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 4288392 excessive sectors (50% of the total 8571466 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","48.49"
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.21",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","929.96",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","487,340",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","63.55",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","22.23",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","524.03",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","63.88",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","24.24",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","484,810.07",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","81.52",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","INF","The kernel is utilizing greater than 80.0% of the available compute or memory performance of the device. To further improve performance, work will likely need to be shifted from the most utilized to another unit. Start by analyzing workloads in the Compute Workload Analysis section.","",""
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","PM Sampling","Maximum Buffer Size","Mbyte","3.67",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","PM Sampling","Dropped Samples","sample","0",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","PM Sampling","Maximum Sampling Interval","cycle","80,000",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","PM Sampling","# Pass Groups","","4",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","3.28",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","3.26",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","81.95",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","3.28",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","81.95",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FMA is the highest-utilized pipeline (52.5%) based on active cycles, taking into account the rates of its different instructions. It executes 32-bit floating point (FADD, FMUL, FMAD, ...) and integer (IMUL, IMAD) operations. It is well-utilized, but should not be a bottleneck.","",""
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","207.42",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","63.55",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","57.78",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","25.58",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","49.11",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","57.78",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 15.6 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","32.59"
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","82.10",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.82",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","17.90",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","11.38",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","2.05",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","13.86",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","13.87",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","3.76",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","3.48",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","WarpStateStats","","","","ThreadDivergence","OPT","Instructions are executed in warps, which are groups of 32 threads. Optimal instruction throughput is achieved if all 32 threads of a warp execute the same instruction. The chosen launch configuration, early thread completion, and divergent flow control can significantly lower the number of active threads in a warp per cycle. This kernel achieves an average of 3.8 threads being active per cycle. This is further reduced to 3.5 threads per warp due to predication. The compiler may use predication to avoid an actual branch. Instead, all instructions are scheduled, but a per-thread condition code or predicate controls which threads execute the instructions. Try to avoid different execution paths within a warp when possible.","global","72.65"
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","397,088.50",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","88,947,823",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","397,285.29",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","88,991,905",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","OPT","This kernel executes 0 fused and 6729534 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","26.24"
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Launch Statistics","Block Size","","64",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Launch Statistics","Grid Size","","126,993",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","16",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","65.54",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","512",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Launch Statistics","# SMs","SM","56",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Launch Statistics","Threads","thread","8,127,552",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Launch Statistics","Uses Green Context","","0",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","70.87",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","64",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","42",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","32",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","64",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","100",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","71.25",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","45.60",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Occupancy","","","","AchievedOccupancy","OPT","The difference between calculated theoretical (100.0%) and measured achieved occupancy (71.3%) can be the result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy.","local","28.75"
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","141,529",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","15,278,592",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","484,810.07",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","27,290,270",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","457,536.56",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","22,637,760",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","484,810.07",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","27,290,270",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","483,909.77",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","109,161,080",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.17",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","14,900,336",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","98.39",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","969.42",
"4","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 4288392 excessive sectors (50% of the total 8571466 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","48.54"
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.21",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","929.96",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","487,546",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","63.53",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","22.23",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","524.26",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","63.87",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","24.24",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","484,897.48",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","81.49",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","INF","The kernel is utilizing greater than 80.0% of the available compute or memory performance of the device. To further improve performance, work will likely need to be shifted from the most utilized to another unit. Start by analyzing workloads in the Compute Workload Analysis section.","",""
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","PM Sampling","Maximum Buffer Size","Kbyte","524.29",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","PM Sampling","Dropped Samples","sample","0",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","PM Sampling","Maximum Sampling Interval","cycle","20,000",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","PM Sampling","# Pass Groups","","4",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","3.28",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","3.26",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","81.93",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","3.28",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","81.93",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FMA is the highest-utilized pipeline (52.5%) based on active cycles, taking into account the rates of its different instructions. It executes 32-bit floating point (FADD, FMUL, FMAD, ...) and integer (IMUL, IMAD) operations. It is well-utilized, but should not be a bottleneck.","",""
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","207.44",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","63.53",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","57.76",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","25.55",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","49.14",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","57.76",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 15.6 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","32.58"
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","82.11",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.82",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","17.89",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","11.37",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","2.06",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","13.85",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","13.86",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","3.76",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","3.48",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","WarpStateStats","","","","ThreadDivergence","OPT","Instructions are executed in warps, which are groups of 32 threads. Optimal instruction throughput is achieved if all 32 threads of a warp execute the same instruction. The chosen launch configuration, early thread completion, and divergent flow control can significantly lower the number of active threads in a warp per cycle. This kernel achieves an average of 3.8 threads being active per cycle. This is further reduced to 3.5 threads per warp due to predication. The compiler may use predication to avoid an actual branch. Instead, all instructions are scheduled, but a per-thread condition code or predicate controls which threads execute the instructions. Try to avoid different execution paths within a warp when possible.","global","72.61"
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","397,088.50",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","88,947,823",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","397,285.30",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","88,991,907",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","OPT","This kernel executes 0 fused and 6729534 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","26.24"
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Launch Statistics","Block Size","","64",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Launch Statistics","Grid Size","","126,993",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","16",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","65.54",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","512",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Launch Statistics","# SMs","SM","56",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Launch Statistics","Threads","thread","8,127,552",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Launch Statistics","Uses Green Context","","0",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","70.87",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","64",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","42",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","32",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","64",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","100",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","71.19",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","45.56",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Occupancy","","","","AchievedOccupancy","OPT","The difference between calculated theoretical (100.0%) and measured achieved occupancy (71.2%) can be the result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy.","local","28.81"
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","141,605",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","15,285,248",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","484,897.48",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","27,301,946",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","457,432.54",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","22,646,736",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","484,897.48",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","27,301,946",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","483,826.22",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","109,207,784",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.17",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","14,900,336",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","98.39",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","969.42",
"5","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(126993, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 4288392 excessive sectors (50% of the total 8571466 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","48.51"
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.21",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","929.97",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","512,580",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","64.65",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","21.15",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","551.17",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","65.00",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","22.87",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","509,781.12",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","84.82",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","INF","The kernel is utilizing greater than 80.0% of the available compute or memory performance of the device. To further improve performance, work will likely need to be shifted from the most utilized to another unit. Start by analyzing workloads in the Compute Workload Analysis section.","",""
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","PM Sampling","Maximum Buffer Size","Mbyte","3.87",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","PM Sampling","Dropped Samples","sample","0",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","PM Sampling","Maximum Sampling Interval","cycle","80,000",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","PM Sampling","# Pass Groups","","4",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","3.41",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","3.39",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","85.29",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","3.41",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","85.29",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FMA is the highest-utilized pipeline (55.0%) based on active cycles, taking into account the rates of its different instructions. It executes 32-bit floating point (FADD, FMUL, FMAD, ...) and integer (IMUL, IMAD) operations. It is well-utilized, but should not be a bottleneck.","",""
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","197.29",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","64.65",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","59.97",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","35.04",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","44.37",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","59.97",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 15.6 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","33.15"
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","85.37",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.85",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","14.63",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","12.94",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","2.79",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","15.16",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","15.17",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","3.44",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","3.18",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","WarpStateStats","","","","ThreadDivergence","OPT","Instructions are executed in warps, which are groups of 32 threads. Optimal instruction throughput is achieved if all 32 threads of a warp execute the same instruction. The chosen launch configuration, early thread completion, and divergent flow control can significantly lower the number of active threads in a warp per cycle. This kernel achieves an average of 3.4 threads being active per cycle. This is further reduced to 3.2 threads per warp due to predication. The compiler may use predication to avoid an actual branch. Instead, all instructions are scheduled, but a per-thread condition code or predicate controls which threads execute the instructions. Try to avoid different execution paths within a warp when possible.","global","76.39"
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","434,643.97",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","97,360,250",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","434,783.11",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","97,391,417",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","OPT","This kernel executes 0 fused and 7446237 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","27.49"
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Launch Statistics","Block Size","","128",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Launch Statistics","Grid Size","","63,497",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","16",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","65.54",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","Kbyte/block","1.02",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Launch Statistics","# SMs","SM","56",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Launch Statistics","Threads","thread","8,127,616",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Launch Statistics","Uses Green Context","","0",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","70.87",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","32",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","32",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","16",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","64",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","100",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","81.07",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","51.89",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Occupancy","","","","AchievedOccupancy","OPT","The difference between calculated theoretical (100.0%) and measured achieved occupancy (81.1%) can be the result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy.","local","18.93"
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","141,588.67",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","16,069,632",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","509,781.12",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","28,703,780",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","464,817.33",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","23,810,544",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","509,781.12",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","28,703,780",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","509,285.90",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","114,815,120",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.17",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","16,201,104",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","99.27",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","488.04",
"6","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 4282719 excessive sectors (50% of the total 8548186 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","46.95"
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.21",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","929.97",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","513,207",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","64.57",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","21.11",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","551.84",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","64.96",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","22.80",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","510,078.20",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","84.72",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","INF","The kernel is utilizing greater than 80.0% of the available compute or memory performance of the device. To further improve performance, work will likely need to be shifted from the most utilized to another unit. Start by analyzing workloads in the Compute Workload Analysis section.","",""
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","PM Sampling","Maximum Buffer Size","Mbyte","3.87",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","PM Sampling","Dropped Samples","sample","0",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","PM Sampling","Maximum Sampling Interval","cycle","80,000",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","PM Sampling","# Pass Groups","","4",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","3.41",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","3.39",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","85.24",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","3.41",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","85.24",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FMA is the highest-utilized pipeline (55.0%) based on active cycles, taking into account the rates of its different instructions. It executes 32-bit floating point (FADD, FMUL, FMAD, ...) and integer (IMUL, IMAD) operations. It is well-utilized, but should not be a bottleneck.","",""
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","197.00",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","64.57",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","59.89",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","35.19",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","44.31",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","59.89",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 15.6 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","33.11"
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","85.42",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.85",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","14.58",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","12.95",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","2.79",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","15.16",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","15.16",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","3.44",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","3.18",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","WarpStateStats","","","","ThreadDivergence","OPT","Instructions are executed in warps, which are groups of 32 threads. Optimal instruction throughput is achieved if all 32 threads of a warp execute the same instruction. The chosen launch configuration, early thread completion, and divergent flow control can significantly lower the number of active threads in a warp per cycle. This kernel achieves an average of 3.4 threads being active per cycle. This is further reduced to 3.2 threads per warp due to predication. The compiler may use predication to avoid an actual branch. Instead, all instructions are scheduled, but a per-thread condition code or predicate controls which threads execute the instructions. Try to avoid different execution paths within a warp when possible.","global","76.29"
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","434,643.97",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","97,360,250",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","434,783.05",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","97,391,403",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","OPT","This kernel executes 0 fused and 7446237 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","27.48"
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Launch Statistics","Block Size","","128",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Launch Statistics","Grid Size","","63,497",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","16",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","65.54",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","Kbyte/block","1.02",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Launch Statistics","# SMs","SM","56",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Launch Statistics","Threads","thread","8,127,616",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Launch Statistics","Uses Green Context","","0",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","70.87",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","32",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","32",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","16",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","64",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","100",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","81.02",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","51.85",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Occupancy","","","","AchievedOccupancy","OPT","The difference between calculated theoretical (100.0%) and measured achieved occupancy (81.0%) can be the result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy.","local","18.98"
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","141,556",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","16,090,112",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","510,078.20",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","28,738,948",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","466,266.25",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","23,839,728",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","510,078.20",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","28,738,948",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","509,013.46",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","114,955,792",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.17",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","16,201,104",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","99.27",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","488.04",
"7","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 4282719 excessive sectors (50% of the total 8548186 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","47.03"
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.21",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","929.97",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","512,849",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","64.62",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","21.12",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","551.46",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","64.99",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","22.84",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","509,881.73",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","84.78",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","INF","The kernel is utilizing greater than 80.0% of the available compute or memory performance of the device. To further improve performance, work will likely need to be shifted from the most utilized to another unit. Start by analyzing workloads in the Compute Workload Analysis section.","",""
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","PM Sampling","Maximum Buffer Size","Mbyte","3.87",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","PM Sampling","Dropped Samples","sample","0",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","PM Sampling","Maximum Sampling Interval","cycle","80,000",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","PM Sampling","# Pass Groups","","4",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","3.41",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","3.39",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","85.27",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","3.41",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","85.27",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FMA is the highest-utilized pipeline (55.0%) based on active cycles, taking into account the rates of its different instructions. It executes 32-bit floating point (FADD, FMUL, FMAD, ...) and integer (IMUL, IMAD) operations. It is well-utilized, but should not be a bottleneck.","",""
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","197.11",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","64.62",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","59.93",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","35.11",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","44.38",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","59.93",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 15.6 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","33.14"
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","85.42",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.85",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","14.58",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","12.95",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","2.79",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","15.16",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","15.17",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","3.44",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","3.18",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","WarpStateStats","","","","ThreadDivergence","OPT","Instructions are executed in warps, which are groups of 32 threads. Optimal instruction throughput is achieved if all 32 threads of a warp execute the same instruction. The chosen launch configuration, early thread completion, and divergent flow control can significantly lower the number of active threads in a warp per cycle. This kernel achieves an average of 3.4 threads being active per cycle. This is further reduced to 3.2 threads per warp due to predication. The compiler may use predication to avoid an actual branch. Instead, all instructions are scheduled, but a per-thread condition code or predicate controls which threads execute the instructions. Try to avoid different execution paths within a warp when possible.","global","76.35"
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","434,643.97",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","97,360,250",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","434,782.97",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","97,391,385",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","OPT","This kernel executes 0 fused and 7446237 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","27.49"
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Launch Statistics","Block Size","","128",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Launch Statistics","Grid Size","","63,497",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","16",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","65.54",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","Kbyte/block","1.02",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Launch Statistics","# SMs","SM","56",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Launch Statistics","Threads","thread","8,127,616",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Launch Statistics","Uses Green Context","","0",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","70.87",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","32",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","32",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","16",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","64",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","100",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","81.07",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","51.88",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Occupancy","","","","AchievedOccupancy","OPT","The difference between calculated theoretical (100.0%) and measured achieved occupancy (81.1%) can be the result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy.","local","18.93"
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","141,531.33",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","16,079,360",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","509,881.73",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","28,718,858",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","465,835.60",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","23,822,976",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","509,881.73",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","28,718,858",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","508,981.25",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","114,875,432",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.17",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","16,201,104",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","99.27",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","488.04",
"8","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(63497, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 4282719 excessive sectors (50% of the total 8548186 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","47.02"
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.21",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","929.93",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","578,064",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","59.15",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","18.76",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","621.60",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","59.47",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","20.15",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","574,910.50",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","78.48",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","OPT","Compute is more heavily utilized than Memory: Look at the Compute Workload Analysis section to see what the compute pipelines are spending their time doing. Also, consider whether any computation is redundant and could be reduced or moved to look-up tables.","",""
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","PM Sampling","Maximum Buffer Size","Mbyte","4.00",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","PM Sampling","Dropped Samples","sample","0",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","PM Sampling","Maximum Sampling Interval","cycle","80,000",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","PM Sampling","# Pass Groups","","4",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","3.16",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","3.14",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","78.91",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","3.16",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","78.91",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FMA is the highest-utilized pipeline (51.0%) based on active cycles, taking into account the rates of its different instructions. It executes 32-bit floating point (FADD, FMUL, FMAD, ...) and integer (IMUL, IMAD) operations. It is well-utilized, but should not be a bottleneck.","",""
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","175.01",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","59.15",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","55.41",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","43.08",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","39.68",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","55.41",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 15.6 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","30.33"
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","79.01",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.79",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","20.99",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","11.45",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","2.44",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","14.49",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","14.50",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","3.29",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","3.05",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","WarpStateStats","","","","ThreadDivergence","OPT","Instructions are executed in warps, which are groups of 32 threads. Optimal instruction throughput is achieved if all 32 threads of a warp execute the same instruction. The chosen launch configuration, early thread completion, and divergent flow control can significantly lower the number of active threads in a warp per cycle. This kernel achieves an average of 3.3 threads being active per cycle. This is further reduced to 3.1 threads per warp due to predication. The compiler may use predication to avoid an actual branch. Instead, all instructions are scheduled, but a per-thread condition code or predicate controls which threads execute the instructions. Try to avoid different execution paths within a warp when possible.","global","71"
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","453,524.12",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","101,589,404",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","453,637.93",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","101,614,897",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","OPT","This kernel executes 0 fused and 7806273 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","25.51"
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Launch Statistics","Block Size","","256",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Launch Statistics","Grid Size","","31,749",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","16",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","65.54",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","Kbyte/block","2.05",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Launch Statistics","# SMs","SM","56",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Launch Statistics","Threads","thread","8,127,744",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Launch Statistics","Uses Green Context","","0",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","70.87",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","16",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","21",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","8",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","64",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","100",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","71.71",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","45.90",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Occupancy","","","","AchievedOccupancy","OPT","The difference between calculated theoretical (100.0%) and measured achieved occupancy (71.7%) can be the result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy.","local","28.29"
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","141,648.33",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","18,124,288",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","574,910.50",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","32,370,534",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","495,818.75",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","26,851,536",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","574,910.50",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","32,370,534",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","574,186.85",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","129,482,136",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.17",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","16,855,439",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","99.65",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","246.43",
"9","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 4279913 excessive sectors (50% of the total 8536732 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","44.44"
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.21",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","929.87",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","578,356",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","59.12",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","18.74",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","621.95",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","59.44",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","20.14",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","575,258.39",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","78.44",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","OPT","Compute is more heavily utilized than Memory: Look at the Compute Workload Analysis section to see what the compute pipelines are spending their time doing. Also, consider whether any computation is redundant and could be reduced or moved to look-up tables.","",""
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","PM Sampling","Maximum Buffer Size","Mbyte","4.00",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","PM Sampling","Dropped Samples","sample","0",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","PM Sampling","Maximum Sampling Interval","cycle","80,000",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","PM Sampling","# Pass Groups","","4",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","3.15",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","3.14",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","78.86",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","3.15",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","78.86",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FMA is the highest-utilized pipeline (51.0%) based on active cycles, taking into account the rates of its different instructions. It executes 32-bit floating point (FADD, FMUL, FMAD, ...) and integer (IMUL, IMAD) operations. It is well-utilized, but should not be a bottleneck.","",""
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","174.88",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","59.12",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","55.39",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","43.06",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","39.68",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","55.39",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 15.6 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","30.32"
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","78.94",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.79",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","21.06",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","11.44",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","2.44",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","14.50",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","14.50",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","3.29",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","3.05",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","WarpStateStats","","","","ThreadDivergence","OPT","Instructions are executed in warps, which are groups of 32 threads. Optimal instruction throughput is achieved if all 32 threads of a warp execute the same instruction. The chosen launch configuration, early thread completion, and divergent flow control can significantly lower the number of active threads in a warp per cycle. This kernel achieves an average of 3.3 threads being active per cycle. This is further reduced to 3.1 threads per warp due to predication. The compiler may use predication to avoid an actual branch. Instead, all instructions are scheduled, but a per-thread condition code or predicate controls which threads execute the instructions. Try to avoid different execution paths within a warp when possible.","global","70.96"
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","453,524.12",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","101,589,404",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","453,637.93",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","101,614,897",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","OPT","This kernel executes 0 fused and 7806273 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","25.49"
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Launch Statistics","Block Size","","256",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Launch Statistics","Grid Size","","31,749",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","16",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","65.54",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","Kbyte/block","2.05",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Launch Statistics","# SMs","SM","56",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Launch Statistics","Threads","thread","8,127,744",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Launch Statistics","Uses Green Context","","0",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","70.87",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","16",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","21",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","8",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","64",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","100",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","71.69",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","45.88",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Occupancy","","","","AchievedOccupancy","OPT","The difference between calculated theoretical (100.0%) and measured achieved occupancy (71.7%) can be the result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy.","local","28.31"
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","141,621.50",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","18,132,992",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","575,258.39",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","32,386,900",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","494,941.98",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","26,865,120",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","575,258.39",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","32,386,900",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","574,679.63",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","129,547,600",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.17",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","16,855,439",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","99.65",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","246.43",
"10","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 4279913 excessive sectors (50% of the total 8536732 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","44.34"
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.21",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","929.92",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","578,267",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","59.13",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","18.74",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","621.82",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","59.41",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","20.15",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","575,479.23",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","78.45",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","OPT","Compute is more heavily utilized than Memory: Look at the Compute Workload Analysis section to see what the compute pipelines are spending their time doing. Also, consider whether any computation is redundant and could be reduced or moved to look-up tables.","",""
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","PM Sampling","Maximum Buffer Size","Mbyte","4.00",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","PM Sampling","Dropped Samples","sample","0",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","PM Sampling","Maximum Sampling Interval","cycle","80,000",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","PM Sampling","# Pass Groups","","4",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","3.15",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","3.14",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","78.83",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","3.15",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","78.83",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FMA is the highest-utilized pipeline (51.0%) based on active cycles, taking into account the rates of its different instructions. It executes 32-bit floating point (FADD, FMUL, FMAD, ...) and integer (IMUL, IMAD) operations. It is well-utilized, but should not be a bottleneck.","",""
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","174.82",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","59.13",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","55.40",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","43.04",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","39.68",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","55.40",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 15.6 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","30.32"
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","79.08",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.79",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","20.92",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","11.46",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","2.44",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","14.49",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","14.49",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","3.29",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","3.05",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","WarpStateStats","","","","ThreadDivergence","OPT","Instructions are executed in warps, which are groups of 32 threads. Optimal instruction throughput is achieved if all 32 threads of a warp execute the same instruction. The chosen launch configuration, early thread completion, and divergent flow control can significantly lower the number of active threads in a warp per cycle. This kernel achieves an average of 3.3 threads being active per cycle. This is further reduced to 3.1 threads per warp due to predication. The compiler may use predication to avoid an actual branch. Instead, all instructions are scheduled, but a per-thread condition code or predicate controls which threads execute the instructions. Try to avoid different execution paths within a warp when possible.","global","70.97"
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","453,524.12",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","101,589,404",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","453,637.97",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","101,614,905",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","OPT","This kernel executes 0 fused and 7806273 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","25.48"
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Launch Statistics","Block Size","","256",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Launch Statistics","Grid Size","","31,749",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","16",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","65.54",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","Kbyte/block","2.05",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Launch Statistics","# SMs","SM","56",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Launch Statistics","Threads","thread","8,127,744",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Launch Statistics","Uses Green Context","","0",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","70.87",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","16",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","21",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","8",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","64",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","100",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","71.62",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","45.84",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Occupancy","","","","AchievedOccupancy","OPT","The difference between calculated theoretical (100.0%) and measured achieved occupancy (71.6%) can be the result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy.","local","28.38"
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","141,549.17",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","18,130,432",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","575,479.23",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","32,381,720",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","495,581.65",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","26,860,848",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","575,479.23",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","32,381,720",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","573,673.90",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","129,526,880",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.17",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","16,855,439",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","99.65",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","246.43",
"11","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(31749, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 4279913 excessive sectors (50% of the total 8536732 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","44.4"
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.21",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","929.93",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","694,730",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","50.04",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","15.60",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","747.07",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","50.32",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","16.73",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","690,904.41",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","66.67",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","OPT","Compute is more heavily utilized than Memory: Look at the Compute Workload Analysis section to see what the compute pipelines are spending their time doing. Also, consider whether any computation is redundant and could be reduced or moved to look-up tables.","",""
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","PM Sampling","Maximum Buffer Size","Mbyte","4.06",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","PM Sampling","Dropped Samples","sample","0",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","PM Sampling","Maximum Sampling Interval","cycle","80,000",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","PM Sampling","# Pass Groups","","4",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","2.68",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","2.67",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","67.03",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","2.68",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","67.03",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FMA is the highest-utilized pipeline (43.4%) based on active cycles, taking into account the rates of its different instructions. It executes 32-bit floating point (FADD, FMUL, FMAD, ...) and integer (IMUL, IMAD) operations. It is well-utilized, but should not be a bottleneck.","",""
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","145.59",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","50.04",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","47.05",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","48.40",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","36.01",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","47.05",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 15.6 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","25.66"
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","67.37",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.67",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","32.63",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","9.31",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1.91",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","13.82",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","13.83",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","3.23",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","2.99",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","WarpStateStats","","","","ThreadDivergence","OPT","Instructions are executed in warps, which are groups of 32 threads. Optimal instruction throughput is achieved if all 32 threads of a warp execute the same instruction. The chosen launch configuration, early thread completion, and divergent flow control can significantly lower the number of active threads in a warp per cycle. This kernel achieves an average of 3.2 threads being active per cycle. This is further reduced to 3.0 threads per warp due to predication. The compiler may use predication to avoid an actual branch. Instead, all instructions are scheduled, but a per-thread condition code or predicate controls which threads execute the instructions. Try to avoid different execution paths within a warp when possible.","global","60.44"
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","463,039.96",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","103,720,952",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","463,140.80",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","103,743,539",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","OPT","This kernel executes 0 fused and 7987610 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","21.7"
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Launch Statistics","Block Size","","512",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Launch Statistics","Grid Size","","15,875",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","16",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","65.54",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","Kbyte/block","4.10",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Launch Statistics","# SMs","SM","56",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Launch Statistics","Threads","thread","8,128,000",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Launch Statistics","Uses Green Context","","0",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","70.87",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","8",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","12",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","4",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","64",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","100",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","58.12",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","37.19",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Occupancy","","","","AchievedOccupancy","OPT","The difference between calculated theoretical (100.0%) and measured achieved occupancy (58.1%) can be the result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy.","local","41.88"
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","141,626.33",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","21,782,528",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","690,904.41",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","38,904,516",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","535,004.33",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","32,271,600",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","690,904.41",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","38,904,516",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","687,436.23",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","155,618,064",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.17",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","17,185,499",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","99.83",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","125.32",
"12","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 4278558 excessive sectors (50% of the total 8531122 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","39.91"
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.21",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","929.96",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","694,251",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","50.08",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","15.61",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","746.53",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","50.31",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","16.77",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","690,956.12",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","66.71",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","OPT","Compute is more heavily utilized than Memory: Look at the Compute Workload Analysis section to see what the compute pipelines are spending their time doing. Also, consider whether any computation is redundant and could be reduced or moved to look-up tables.","",""
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","PM Sampling","Maximum Buffer Size","Mbyte","4.06",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","PM Sampling","Dropped Samples","sample","0",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","PM Sampling","Maximum Sampling Interval","cycle","80,000",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","PM Sampling","# Pass Groups","","4",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","2.68",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","2.67",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","67.03",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","2.68",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","67.03",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FMA is the highest-utilized pipeline (43.4%) based on active cycles, taking into account the rates of its different instructions. It executes 32-bit floating point (FADD, FMUL, FMAD, ...) and integer (IMUL, IMAD) operations. It is well-utilized, but should not be a bottleneck.","",""
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","145.64",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","50.08",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","47.08",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","48.40",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","36.05",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","47.08",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 15.6 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","25.68"
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","67.53",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.68",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","32.47",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","9.34",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1.91",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","13.83",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","13.83",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","3.23",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","2.99",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","WarpStateStats","","","","ThreadDivergence","OPT","Instructions are executed in warps, which are groups of 32 threads. Optimal instruction throughput is achieved if all 32 threads of a warp execute the same instruction. The chosen launch configuration, early thread completion, and divergent flow control can significantly lower the number of active threads in a warp per cycle. This kernel achieves an average of 3.2 threads being active per cycle. This is further reduced to 3.0 threads per warp due to predication. The compiler may use predication to avoid an actual branch. Instead, all instructions are scheduled, but a per-thread condition code or predicate controls which threads execute the instructions. Try to avoid different execution paths within a warp when possible.","global","60.48"
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","463,039.96",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","103,720,952",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","463,140.76",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","103,743,531",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","OPT","This kernel executes 0 fused and 7987610 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","21.7"
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Launch Statistics","Block Size","","512",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Launch Statistics","Grid Size","","15,875",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","16",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","65.54",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","Kbyte/block","4.10",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Launch Statistics","# SMs","SM","56",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Launch Statistics","Threads","thread","8,128,000",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Launch Statistics","Uses Green Context","","0",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","70.87",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","8",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","12",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","4",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","64",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","100",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","58.14",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","37.21",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Occupancy","","","","AchievedOccupancy","OPT","The difference between calculated theoretical (100.0%) and measured achieved occupancy (58.1%) can be the result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy.","local","41.86"
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","141,566.83",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","21,767,680",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","690,956.12",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","38,877,440",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","535,221.54",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","32,249,088",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","690,956.12",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","38,877,440",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","685,867.96",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","155,509,760",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.17",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","17,185,499",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","99.83",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","125.32",
"13","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 4278558 excessive sectors (50% of the total 8531122 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","39.95"
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.21",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","929.93",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","695,628",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","49.98",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","15.57",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","748.03",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","50.28",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","16.73",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","691,435.62",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","66.58",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","OPT","Compute is more heavily utilized than Memory: Look at the Compute Workload Analysis section to see what the compute pipelines are spending their time doing. Also, consider whether any computation is redundant and could be reduced or moved to look-up tables.","",""
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","PM Sampling","Maximum Buffer Size","Mbyte","4.06",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","PM Sampling","Dropped Samples","sample","0",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","PM Sampling","Maximum Sampling Interval","cycle","80,000",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","PM Sampling","# Pass Groups","","4",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","2.68",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","2.66",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","66.98",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","2.68",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","66.98",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FMA is the highest-utilized pipeline (43.4%) based on active cycles, taking into account the rates of its different instructions. It executes 32-bit floating point (FADD, FMUL, FMAD, ...) and integer (IMUL, IMAD) operations. It is well-utilized, but should not be a bottleneck.","",""
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","145.28",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","49.98",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","46.99",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","48.41",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","36.05",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","46.99",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 15.6 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","25.63"
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","67.46",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.67",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","32.54",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","9.33",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1.91",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","13.83",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","13.83",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","3.23",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","2.99",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","WarpStateStats","","","","ThreadDivergence","OPT","Instructions are executed in warps, which are groups of 32 threads. Optimal instruction throughput is achieved if all 32 threads of a warp execute the same instruction. The chosen launch configuration, early thread completion, and divergent flow control can significantly lower the number of active threads in a warp per cycle. This kernel achieves an average of 3.2 threads being active per cycle. This is further reduced to 3.0 threads per warp due to predication. The compiler may use predication to avoid an actual branch. Instead, all instructions are scheduled, but a per-thread condition code or predicate controls which threads execute the instructions. Try to avoid different execution paths within a warp when possible.","global","60.36"
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","463,039.96",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","103,720,952",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","463,140.76",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","103,743,531",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","OPT","This kernel executes 0 fused and 7987610 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","21.68"
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Launch Statistics","Block Size","","512",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Launch Statistics","Grid Size","","15,875",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","16",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","65.54",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","Kbyte/block","4.10",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Launch Statistics","# SMs","SM","56",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Launch Statistics","Threads","thread","8,128,000",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Launch Statistics","Uses Green Context","","0",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","70.87",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","8",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","12",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","4",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","64",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","100",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","58.09",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","37.18",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Occupancy","","","","AchievedOccupancy","OPT","The difference between calculated theoretical (100.0%) and measured achieved occupancy (58.1%) can be the result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy.","local","41.91"
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","141,499.33",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","21,810,688",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","691,435.62",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","38,954,748",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","534,413.73",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","32,313,360",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","691,435.62",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","38,954,748",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","686,510.30",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","155,818,992",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.17",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","17,185,499",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","99.83",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","125.32",
"14","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(15875, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 4278558 excessive sectors (50% of the total 8531122 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","39.81"
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.21",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","929.95",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","1,077,674",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","32.54",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","10.05",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","msecond","1.16",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","32.70",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","10.80",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","1,072,670.59",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","43.41",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","OPT","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons.","",""
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","PM Sampling","Maximum Buffer Size","Mbyte","2.42",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","PM Sampling","Dropped Samples","sample","0",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","PM Sampling","Maximum Sampling Interval","cycle","160,000",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","PM Sampling","# Pass Groups","","4",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.74",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","1.74",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","43.61",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.74",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","43.61",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FMA is the highest-utilized pipeline (28.3%) based on active cycles, taking into account the rates of its different instructions. It executes 32-bit floating point (FADD, FMUL, FMAD, ...) and integer (IMUL, IMAD) operations. It is well-utilized, but should not be a bottleneck.","",""
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","93.80",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","32.54",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","30.63",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","51.95",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","33.32",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","30.63",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 15.6 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","16.69"
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","55.06",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.55",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","44.94",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.62",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1.55",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 1.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.62 active warps per scheduler, but only an average of 1.55 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, reduce the time the active warps are stalled by inspecting the top stall reasons on the Warp State Statistics and Source Counters sections.","local","44.94"
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","13.85",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","13.85",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","3.19",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","2.96",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","WarpStateStats","","","","ThreadDivergence","OPT","Instructions are executed in warps, which are groups of 32 threads. Optimal instruction throughput is achieved if all 32 threads of a warp execute the same instruction. The chosen launch configuration, early thread completion, and divergent flow control can significantly lower the number of active threads in a warp per cycle. This kernel achieves an average of 3.2 threads being active per cycle. This is further reduced to 3.0 threads per warp due to predication. The compiler may use predication to avoid an actual branch. Instead, all instructions are scheduled, but a per-thread condition code or predicate controls which threads execute the instructions. Try to avoid different execution paths within a warp when possible.","global","39.39"
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","467,708.79",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","104,766,770",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","467,798.26",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","104,786,811",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","OPT","This kernel executes 0 fused and 8076786 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","14.13"
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Launch Statistics","Block Size","","1,024",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Launch Statistics","Grid Size","","7,938",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","16",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","32.77",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","Kbyte/block","8.19",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Launch Statistics","# SMs","SM","56",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Launch Statistics","Threads","thread","8,128,512",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Launch Statistics","Uses Green Context","","0",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","70.88",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","4",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","3",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","64",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","100",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","37.87",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","24.23",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Occupancy","","","","AchievedOccupancy","OPT","The difference between calculated theoretical (100.0%) and measured achieved occupancy (37.9%) can be the result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy.","global","44.94"
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","141,530.33",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","33,790,976",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","1,072,670.59",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","60,349,702",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","576,307.23",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","50,059,680",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","1,072,670.59",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","60,349,702",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","849,591.58",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","241,398,808",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","WorkloadDistribution","","","","WorkloadImbalance","OPT","One or more SMSPs have a much higher number of active cycles than the average number of active cycles. Maximum instance value is 13.17% above the average, while the minimum instance value is 8.69% below the average.","global","10.39"
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.17",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","17,347,074",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","99.91",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","65.27",
"15","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 4277835 excessive sectors (50% of the total 8528152 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","27.72"
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.21",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","929.96",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","1,077,890",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","32.53",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","10.05",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","msecond","1.16",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","32.65",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","10.80",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","1,073,945.50",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","43.40",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","OPT","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons.","",""
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","PM Sampling","Maximum Buffer Size","Mbyte","2.42",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","PM Sampling","Dropped Samples","sample","0",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","PM Sampling","Maximum Sampling Interval","cycle","160,000",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","PM Sampling","# Pass Groups","","4",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.74",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","1.74",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","43.56",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.74",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","43.56",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FMA is the highest-utilized pipeline (28.2%) based on active cycles, taking into account the rates of its different instructions. It executes 32-bit floating point (FADD, FMUL, FMAD, ...) and integer (IMUL, IMAD) operations. It is well-utilized, but should not be a bottleneck.","",""
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","93.79",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","32.53",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","30.62",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","51.95",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","33.33",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","30.62",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 15.6 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","16.68"
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","55.08",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.55",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","44.92",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.62",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1.55",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 1.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.62 active warps per scheduler, but only an average of 1.55 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, reduce the time the active warps are stalled by inspecting the top stall reasons on the Warp State Statistics and Source Counters sections.","local","44.92"
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","13.84",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","13.84",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","3.19",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","2.96",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","WarpStateStats","","","","ThreadDivergence","OPT","Instructions are executed in warps, which are groups of 32 threads. Optimal instruction throughput is achieved if all 32 threads of a warp execute the same instruction. The chosen launch configuration, early thread completion, and divergent flow control can significantly lower the number of active threads in a warp per cycle. This kernel achieves an average of 3.2 threads being active per cycle. This is further reduced to 3.0 threads per warp due to predication. The compiler may use predication to avoid an actual branch. Instead, all instructions are scheduled, but a per-thread condition code or predicate controls which threads execute the instructions. Try to avoid different execution paths within a warp when possible.","global","39.39"
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","467,708.79",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","104,766,770",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","467,798.26",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","104,786,811",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","OPT","This kernel executes 0 fused and 8076786 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","14.11"
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Launch Statistics","Block Size","","1,024",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Launch Statistics","Grid Size","","7,938",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","16",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","32.77",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","Kbyte/block","8.19",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Launch Statistics","# SMs","SM","56",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Launch Statistics","Threads","thread","8,128,512",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Launch Statistics","Uses Green Context","","0",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","70.88",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","4",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","3",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","64",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","100",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","37.81",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","24.20",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Occupancy","","","","AchievedOccupancy","OPT","The difference between calculated theoretical (100.0%) and measured achieved occupancy (37.8%) can be the result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy.","global","44.92"
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","141,550.83",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","33,796,608",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","1,073,945.50",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","60,361,812",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","573,571.44",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","50,070,384",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","1,073,945.50",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","60,361,812",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","849,287.12",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","241,447,248",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","WorkloadDistribution","","","","WorkloadImbalance","OPT","One or more SMSPs have a much higher number of active cycles than the average number of active cycles. Maximum instance value is 13.18% above the average, while the minimum instance value is 8.67% below the average.","global","10.39"
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.17",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","17,347,074",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","99.91",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","65.27",
"16","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 4277835 excessive sectors (50% of the total 8528152 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","27.58"
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.21",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","929.95",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","1,079,253",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","32.49",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","10.04",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","msecond","1.16",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","32.62",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","10.78",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","1,075,151.68",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","43.34",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","OPT","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons.","",""
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","PM Sampling","Maximum Buffer Size","Mbyte","2.42",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","PM Sampling","Dropped Samples","sample","0",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","PM Sampling","Maximum Sampling Interval","cycle","160,000",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","PM Sampling","# Pass Groups","","4",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.74",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","1.73",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","43.51",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.74",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","43.51",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FMA is the highest-utilized pipeline (28.2%) based on active cycles, taking into account the rates of its different instructions. It executes 32-bit floating point (FADD, FMUL, FMAD, ...) and integer (IMUL, IMAD) operations. It is well-utilized, but should not be a bottleneck.","",""
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","93.68",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","32.49",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","30.58",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","51.95",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","33.37",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","30.58",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 15.6 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","16.66"
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","55.10",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.55",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","44.90",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","7.63",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1.56",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 1.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 7.63 active warps per scheduler, but only an average of 1.56 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, reduce the time the active warps are stalled by inspecting the top stall reasons on the Warp State Statistics and Source Counters sections.","local","44.9"
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","13.85",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","13.85",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","3.19",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","2.96",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","WarpStateStats","","","","ThreadDivergence","OPT","Instructions are executed in warps, which are groups of 32 threads. Optimal instruction throughput is achieved if all 32 threads of a warp execute the same instruction. The chosen launch configuration, early thread completion, and divergent flow control can significantly lower the number of active threads in a warp per cycle. This kernel achieves an average of 3.2 threads being active per cycle. This is further reduced to 3.0 threads per warp due to predication. The compiler may use predication to avoid an actual branch. Instead, all instructions are scheduled, but a per-thread condition code or predicate controls which threads execute the instructions. Try to avoid different execution paths within a warp when possible.","global","39.34"
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","467,708.79",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","104,766,770",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","467,798.22",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","104,786,801",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","OPT","This kernel executes 0 fused and 8076786 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","14.09"
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Launch Statistics","Block Size","","1,024",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Launch Statistics","Grid Size","","7,938",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","16",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","32.77",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","Kbyte/block","8.19",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Launch Statistics","# SMs","SM","56",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Launch Statistics","Threads","thread","8,128,512",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Launch Statistics","Uses Green Context","","0",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","70.88",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","4",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","3",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","64",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","100",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","37.79",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","24.19",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Occupancy","","","","AchievedOccupancy","OPT","The difference between calculated theoretical (100.0%) and measured achieved occupancy (37.8%) can be the result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy.","global","44.9"
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","141,558.67",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","33,840,128",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","1,075,151.68",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","60,438,126",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","570,251.23",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","50,133,072",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","1,075,151.68",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","60,438,126",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","848,978.68",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","241,752,504",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","WorkloadDistribution","","","","WorkloadImbalance","OPT","One or more SMSPs have a much higher number of active cycles than the average number of active cycles. Maximum instance value is 13.11% above the average, while the minimum instance value is 8.61% below the average.","global","10.32"
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.17",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","17,347,074",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","99.91",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","65.27",
"17","226311","SpMV","127.0.0.1","226311  ""<default domain>:COO_OLD SortR degme.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(7938, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 4277835 excessive sectors (50% of the total 8528152 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","27.39"
