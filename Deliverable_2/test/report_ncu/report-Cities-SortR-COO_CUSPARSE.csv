"ID","Process ID","Process Name","Host Name","thread Domain:Push/Pop_Range:PL_Type:PL_Value:CLR_Type:Color:Msg_Type:Msg","Id:Domain:Start/Stop_Range:PL_Type:PL_Value:CLR_Type:Color:Msg_Type:Msg","Kernel Name","Context","Stream","Block Size","Grid Size","Device","CC","Section Name","Metric Name","Metric Unit","Metric Value","Rule Name","Rule Type","Rule Description","Estimated Speedup Type","Estimated Speedup"
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.19",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","907.76",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","3,313",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","0.45",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","0.12",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","3.65",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","15.35",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","0.45",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","27.34",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.03",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","OPT","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details.","",""
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","PM Sampling","Maximum Buffer Size","Kbyte","524.29",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","PM Sampling","Dropped Samples","sample","0",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","PM Sampling","Maximum Sampling Interval","cycle","20,000",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","PM Sampling","# Pass Groups","","4",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.10",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.00",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","3.20",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.13",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","3.20",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","All compute pipelines are under-utilized. Either this kernel is very small or it doesn't issue enough warps per scheduler. Check the Launch Statistics and Scheduler Statistics sections for further details.","local","98.73"
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","1.09",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.45",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","0.38",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","11.11",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","94.01",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.00",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L2 might not be optimal. On average, only 12.0 of the 32 bytes transmitted per sector are utilized by each thread. This applies to the 100.0% of sectors missed in L1TEX. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","0.2807"
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores to L2 might not be optimal. On average, only 27.5 of the 32 bytes transmitted per sector are utilized by each thread. This applies to the 87.5% of sectors missed in L1TEX. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global stores.","global","0.05527"
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","4.89",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.05",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","95.11",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","1",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.05",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 20.5 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 1.00 active warps per scheduler, but only an average of 0.05 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, reduce the time the active warps are stalled by inspecting the top stall reasons on the Warp State Statistics and Source Counters sections.","local","95.11"
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","20.45",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","25.06",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","28.32",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","26.62",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 13.2 cycles being stalled waiting for an immediate constant cache (IMC) miss. A read from constant memory costs one memory read from device memory only on a cache miss; otherwise, it just costs one read from the constant cache. Immediate constants are encoded into the SASS instruction as 'c[bank][offset]'. Accesses to different addresses by threads within a warp are serialized, thus the cost scales linearly with the number of unique addresses read by all threads within a warp. As such, the constant cache is best when threads in the same warp access only a few distinct locations. If all threads of a warp access the same location, then constant memory can be as fast as a register access. This stall type represents about 64.7% of the total average of 20.5 cycles between issuing two instructions.","global","64.65"
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","0.71",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","160",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","0.88",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","196",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","OPT","This kernel executes 0 fused and 1 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","0.5879"
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Block Size","","128",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Grid Size","","1",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","16",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","32.77",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","# SMs","SM","56",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Threads","thread","128",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Uses Green Context","","0",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.00",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","OPT","The grid for this launch is configured to execute only 1 blocks, which is less than the GPU's 56 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations.","global","98.21"
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","32",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","32",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","16",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","64",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","100",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","4.17",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","2.67",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Occupancy","","","","AchievedOccupancy","OPT","The difference between calculated theoretical (100.0%) and measured achieved occupancy (4.2%) can be the result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy.","global","95.11"
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","5.17",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","104,448",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","27.34",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","185,444",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","120.96",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","153,840",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","27.34",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","185,444",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","17.90",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","741,776",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.22",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","35",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","94.12",
"0","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.00",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.21",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","921.12",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","7,665",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","0.39",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","0.38",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","8.32",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","16.37",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","0.39",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","102.12",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.16",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","OPT","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details.","",""
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","PM Sampling","Maximum Buffer Size","Kbyte","524.29",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","PM Sampling","Dropped Samples","sample","0",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","PM Sampling","Maximum Sampling Interval","cycle","20,000",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","PM Sampling","# Pass Groups","","4",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.45",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.01",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","11.72",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.47",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","11.72",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","All compute pipelines are under-utilized. Either this kernel is very small or it doesn't issue enough warps per scheduler. Check the Launch Statistics and Scheduler Statistics sections for further details.","local","91.54"
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","3.49",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.39",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","0.38",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","72.44",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","70.65",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.12",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 10.9 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","0.1439"
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores to L2 might not be optimal. On average, only 19.2 of the 32 bytes transmitted per sector are utilized by each thread. This applies to the 80.0% of sectors missed in L1TEX. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global stores.","global","0.1242"
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","SharedMemoryConflicts","OPT","The memory access pattern for shared loads might not be optimal and causes on average a 8.0 - way bank conflict across all 16 shared load requests.This results in 64 bank conflicts,  which represent 50.00% of the overall 128 wavefronts for shared loads. Check the Source Counters section for uncoalesced shared loads.","global","8.183"
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","12.10",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.12",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","87.90",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","1.63",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.14",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 8.3 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 1.63 active warps per scheduler, but only an average of 0.14 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, reduce the time the active warps are stalled by inspecting the top stall reasons on the Warp State Statistics and Source Counters sections.","local","87.9"
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","13.46",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","14.14",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","31.10",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","23.50",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 7.0 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory. This stall type represents about 52.1% of the total average of 13.5 cycles between issuing two instructions.","global","52.14"
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","WarpStateStats","","","","ThreadDivergence","OPT","Instructions are executed in warps, which are groups of 32 threads. Optimal instruction throughput is achieved if all 32 threads of a warp execute the same instruction. The chosen launch configuration, early thread completion, and divergent flow control can significantly lower the number of active threads in a warp per cycle. This kernel achieves an average of 31.1 threads being active per cycle. This is further reduced to 23.5 threads per warp due to predication. The compiler may use predication to avoid an actual branch. Instead, all instructions are scheduled, but a per-thread condition code or predicate controls which threads execute the instructions. Try to avoid different execution paths within a warp when possible.","global","0.04151"
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","11.40",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","2,553",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","11.97",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","2,681",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","OPT","This kernel executes 0 fused and 254 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","3.576"
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Block Size","","256",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Grid Size","","1",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","32",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","102.40",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","Kbyte/block","8.19",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","# SMs","SM","56",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Threads","thread","256",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Uses Green Context","","0",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.00",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","OPT","The grid for this launch is configured to execute only 1 blocks, which is less than the GPU's 56 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations.","global","98.21"
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","8",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","11",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","8",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","64",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","100",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","9.90",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","6.34",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Occupancy","","","","AchievedOccupancy","OPT","The difference between calculated theoretical (100.0%) and measured achieved occupancy (9.9%) can be the result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy.","global","87.9"
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","37.83",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","240,640",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","102.12",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","429,170",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","939.40",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","356,016",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","102.12",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","429,170",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","98.93",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","1,716,680",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","WorkloadDistribution","","","","WorkloadImbalance","OPT","One or more L2 Slices have a much lower number of active cycles than the average number of active cycles. Maximum instance value is 59.46% above the average, while the minimum instance value is 92.02% below the average.","global","7.53"
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.04",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","103",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","89.39",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.03",
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 1229 excessive sectors (64% of the total 1927 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","8.078"
"1","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 0:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedSharedAccess","OPT","This kernel has uncoalesced shared accesses resulting in a total of 64 excessive wavefronts (33% of the total 192 wavefronts). Check the L1 Wavefronts Shared Excessive table for the primary source locations. The CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#shared-memory-in-matrix-multiplication-c-ab) has an example on optimizing shared memory accesses.","global","0.4442"
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.20",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","916.22",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","3,285",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","0.48",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","0.12",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","3.58",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","15.51",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","0.48",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","27.05",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.03",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","OPT","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details.","",""
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","PM Sampling","Maximum Buffer Size","Kbyte","524.29",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","PM Sampling","Dropped Samples","sample","0",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","PM Sampling","Maximum Sampling Interval","cycle","20,000",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","PM Sampling","# Pass Groups","","4",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.11",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.00",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","3.23",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.13",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","3.23",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","All compute pipelines are under-utilized. Either this kernel is very small or it doesn't issue enough warps per scheduler. Check the Launch Statistics and Scheduler Statistics sections for further details.","local","98.71"
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","1.14",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.48",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","0.44",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","11.11",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","98.66",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.00",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L2 might not be optimal. On average, only 12.0 of the 32 bytes transmitted per sector are utilized by each thread. This applies to the 100.0% of sectors missed in L1TEX. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","0.2984"
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores to L2 might not be optimal. On average, only 27.5 of the 32 bytes transmitted per sector are utilized by each thread. This applies to the 87.5% of sectors missed in L1TEX. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global stores.","global","0.05874"
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","4.90",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.05",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","95.10",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","1",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.05",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 20.4 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 1.00 active warps per scheduler, but only an average of 0.05 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, reduce the time the active warps are stalled by inspecting the top stall reasons on the Warp State Statistics and Source Counters sections.","local","95.1"
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","20.42",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","25.02",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","28.32",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","26.62",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 13.2 cycles being stalled waiting for an immediate constant cache (IMC) miss. A read from constant memory costs one memory read from device memory only on a cache miss; otherwise, it just costs one read from the constant cache. Immediate constants are encoded into the SASS instruction as 'c[bank][offset]'. Accesses to different addresses by threads within a warp are serialized, thus the cost scales linearly with the number of unique addresses read by all threads within a warp. As such, the constant cache is best when threads in the same warp access only a few distinct locations. If all threads of a warp access the same location, then constant memory can be as fast as a register access. This stall type represents about 64.8% of the total average of 20.4 cycles between issuing two instructions.","global","64.75"
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","0.71",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","160",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","0.88",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","196",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","OPT","This kernel executes 0 fused and 1 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","0.5941"
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Block Size","","128",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Grid Size","","1",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","16",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","32.77",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","# SMs","SM","56",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Threads","thread","128",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Uses Green Context","","0",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.00",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","OPT","The grid for this launch is configured to execute only 1 blocks, which is less than the GPU's 56 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations.","global","98.21"
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","32",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","32",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","16",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","64",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","100",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","4.21",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","2.69",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Occupancy","","","","AchievedOccupancy","OPT","The difference between calculated theoretical (100.0%) and measured achieved occupancy (4.2%) can be the result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy.","global","95.1"
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","5.33",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","103,424",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","27.05",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","183,890",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","125.60",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","152,496",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","27.05",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","183,890",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","17.87",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","735,560",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.22",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","35",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","94.12",
"2","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.00",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.20",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","922.80",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","7,709",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","0.39",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","0.38",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","8.35",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","16.24",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","0.39",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","102.89",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.16",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","OPT","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details.","",""
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","PM Sampling","Maximum Buffer Size","Kbyte","524.29",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","PM Sampling","Dropped Samples","sample","0",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","PM Sampling","Maximum Sampling Interval","cycle","20,000",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","PM Sampling","# Pass Groups","","4",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.44",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.01",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","11.63",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.47",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","11.63",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","All compute pipelines are under-utilized. Either this kernel is very small or it doesn't issue enough warps per scheduler. Check the Launch Statistics and Scheduler Statistics sections for further details.","local","91.6"
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","3.49",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.39",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","0.38",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","72.44",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","70.56",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.12",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 10.9 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","0.1431"
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores to L2 might not be optimal. On average, only 19.2 of the 32 bytes transmitted per sector are utilized by each thread. This applies to the 80.0% of sectors missed in L1TEX. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global stores.","global","0.1238"
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","SharedMemoryConflicts","OPT","The memory access pattern for shared loads might not be optimal and causes on average a 8.0 - way bank conflict across all 16 shared load requests.This results in 64 bank conflicts,  which represent 50.00% of the overall 128 wavefronts for shared loads. Check the Source Counters section for uncoalesced shared loads.","global","8.122"
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","12.39",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.12",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","87.61",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","1.64",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.14",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 8.1 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 1.64 active warps per scheduler, but only an average of 0.14 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, reduce the time the active warps are stalled by inspecting the top stall reasons on the Warp State Statistics and Source Counters sections.","local","87.61"
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","13.22",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","13.88",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","31.10",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","23.50",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 6.9 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory. This stall type represents about 52.5% of the total average of 13.2 cycles between issuing two instructions.","global","52.54"
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","WarpStateStats","","","","ThreadDivergence","OPT","Instructions are executed in warps, which are groups of 32 threads. Optimal instruction throughput is achieved if all 32 threads of a warp execute the same instruction. The chosen launch configuration, early thread completion, and divergent flow control can significantly lower the number of active threads in a warp per cycle. This kernel achieves an average of 31.1 threads being active per cycle. This is further reduced to 23.5 threads per warp due to predication. The compiler may use predication to avoid an actual branch. Instead, all instructions are scheduled, but a per-thread condition code or predicate controls which threads execute the instructions. Try to avoid different execution paths within a warp when possible.","global","0.04127"
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","11.40",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","2,553",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","11.97",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","2,681",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","OPT","This kernel executes 0 fused and 254 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","3.549"
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Block Size","","256",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Grid Size","","1",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","32",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","102.40",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","Kbyte/block","8.19",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","# SMs","SM","56",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Threads","thread","256",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Uses Green Context","","0",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.00",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","OPT","The grid for this launch is configured to execute only 1 blocks, which is less than the GPU's 56 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations.","global","98.21"
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","8",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","11",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","8",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","64",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","100",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","9.65",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","6.18",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Occupancy","","","","AchievedOccupancy","OPT","The difference between calculated theoretical (100.0%) and measured achieved occupancy (9.7%) can be the result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy.","global","87.61"
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","38",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","241,408",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","102.89",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","431,606",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","958.15",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","358,032",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","102.89",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","431,606",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","96.63",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","1,726,424",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","WorkloadDistribution","","","","WorkloadImbalance","OPT","One or more L2 Slices have a much lower number of active cycles than the average number of active cycles. Maximum instance value is 60.76% above the average, while the minimum instance value is 91.86% below the average.","global","7.805"
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.04",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","103",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","89.39",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.03",
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 1229 excessive sectors (64% of the total 1927 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","8.193"
"3","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 1:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedSharedAccess","OPT","This kernel has uncoalesced shared accesses resulting in a total of 64 excessive wavefronts (33% of the total 192 wavefronts). Check the L1 Wavefronts Shared Excessive table for the primary source locations. The CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#shared-memory-in-matrix-multiplication-c-ab) has an example on optimizing shared memory accesses.","global","0.445"
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.19",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","915.89",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","3,254",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","0.46",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","0.12",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","3.55",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","15.73",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","0.46",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","26.68",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.03",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","OPT","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details.","",""
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","PM Sampling","Maximum Buffer Size","Kbyte","524.29",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","PM Sampling","Dropped Samples","sample","0",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","PM Sampling","Maximum Sampling Interval","cycle","20,000",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","PM Sampling","# Pass Groups","","4",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.11",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.00",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","3.28",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.13",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","3.28",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","All compute pipelines are under-utilized. Either this kernel is very small or it doesn't issue enough warps per scheduler. Check the Launch Statistics and Scheduler Statistics sections for further details.","local","98.69"
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","1.12",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.46",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","0.44",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","11.11",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","100.11",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.00",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L2 might not be optimal. On average, only 12.0 of the 32 bytes transmitted per sector are utilized by each thread. This applies to the 100.0% of sectors missed in L1TEX. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","0.2857"
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores to L2 might not be optimal. On average, only 27.5 of the 32 bytes transmitted per sector are utilized by each thread. This applies to the 87.5% of sectors missed in L1TEX. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global stores.","global","0.05625"
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","4.90",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.05",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","95.10",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","1",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.05",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 20.4 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 1.00 active warps per scheduler, but only an average of 0.05 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, reduce the time the active warps are stalled by inspecting the top stall reasons on the Warp State Statistics and Source Counters sections.","local","95.1"
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","20.42",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","25.01",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","28.32",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","26.62",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 13.2 cycles being stalled waiting for an immediate constant cache (IMC) miss. A read from constant memory costs one memory read from device memory only on a cache miss; otherwise, it just costs one read from the constant cache. Immediate constants are encoded into the SASS instruction as 'c[bank][offset]'. Accesses to different addresses by threads within a warp are serialized, thus the cost scales linearly with the number of unique addresses read by all threads within a warp. As such, the constant cache is best when threads in the same warp access only a few distinct locations. If all threads of a warp access the same location, then constant memory can be as fast as a register access. This stall type represents about 64.9% of the total average of 20.4 cycles between issuing two instructions.","global","64.87"
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","0.71",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","160",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","0.88",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","196",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","OPT","This kernel executes 0 fused and 1 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","0.6024"
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Block Size","","128",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Grid Size","","1",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","16",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","32.77",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","# SMs","SM","56",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Threads","thread","128",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Uses Green Context","","0",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.00",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","OPT","The grid for this launch is configured to execute only 1 blocks, which is less than the GPU's 56 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations.","global","98.21"
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","32",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","32",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","16",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","64",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","100",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","4.26",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","2.73",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Occupancy","","","","AchievedOccupancy","OPT","The difference between calculated theoretical (100.0%) and measured achieved occupancy (4.3%) can be the result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy.","global","95.1"
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","5.17",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","101,632",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","26.68",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","182,182",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","123.73",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","151,152",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","26.68",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","182,182",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","17.87",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","728,728",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.22",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","35",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","94.12",
"4","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::vector_scalar_multiply_kernel<cusparse::VectorWiseMulPolicy<(bool)1, float>, long, float, float>(cusparse::KernelCoeff<T3>, T2, T4 *)","1","7","(128, 1, 1)","(1, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.00",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.20",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","924.46",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","7,869",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","0.38",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","0.37",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","8.51",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","15.80",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","0.38",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","105.77",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.15",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","OPT","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details.","",""
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","PM Sampling","Maximum Buffer Size","Kbyte","524.29",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","PM Sampling","Dropped Samples","sample","0",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","PM Sampling","Maximum Sampling Interval","cycle","20,000",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","PM Sampling","# Pass Groups","","4",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.43",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.01",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","11.32",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.45",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","11.32",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","All compute pipelines are under-utilized. Either this kernel is very small or it doesn't issue enough warps per scheduler. Check the Launch Statistics and Scheduler Statistics sections for further details.","local","91.83"
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","3.44",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.38",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","0.37",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","72.44",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","71.66",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.11",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 10.9 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","0.1401"
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global stores to L2 might not be optimal. On average, only 19.2 of the 32 bytes transmitted per sector are utilized by each thread. This applies to the 80.0% of sectors missed in L1TEX. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global stores.","global","0.1212"
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","SharedMemoryConflicts","OPT","The memory access pattern for shared loads might not be optimal and causes on average a 8.0 - way bank conflict across all 16 shared load requests.This results in 64 bank conflicts,  which represent 50.00% of the overall 128 wavefronts for shared loads. Check the Source Counters section for uncoalesced shared loads.","global","7.901"
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","12.37",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.12",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","87.63",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","1.64",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.14",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 8.1 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 1.64 active warps per scheduler, but only an average of 0.14 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, reduce the time the active warps are stalled by inspecting the top stall reasons on the Warp State Statistics and Source Counters sections.","local","87.63"
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","13.24",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","13.90",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","31.10",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","23.50",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 7.0 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory. This stall type represents about 53.2% of the total average of 13.2 cycles between issuing two instructions.","global","53.21"
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","WarpStateStats","","","","ThreadDivergence","OPT","Instructions are executed in warps, which are groups of 32 threads. Optimal instruction throughput is achieved if all 32 threads of a warp execute the same instruction. The chosen launch configuration, early thread completion, and divergent flow control can significantly lower the number of active threads in a warp per cycle. This kernel achieves an average of 31.1 threads being active per cycle. This is further reduced to 23.5 threads per warp due to predication. The compiler may use predication to avoid an actual branch. Instead, all instructions are scheduled, but a per-thread condition code or predicate controls which threads execute the instructions. Try to avoid different execution paths within a warp when possible.","global","0.04042"
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","11.40",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","2,553",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","11.97",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","2,681",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","OPT","This kernel executes 0 fused and 254 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","3.453"
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Block Size","","256",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Grid Size","","1",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","32",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","102.40",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","0",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","Kbyte/block","8.19",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","# SMs","SM","56",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Threads","thread","256",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Uses Green Context","","0",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.00",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","OPT","The grid for this launch is configured to execute only 1 blocks, which is less than the GPU's 56 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations.","global","98.21"
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","8",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","11",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","8",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","64",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","100",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","9.40",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","6.02",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Occupancy","","","","AchievedOccupancy","OPT","The difference between calculated theoretical (100.0%) and measured achieved occupancy (9.4%) can be the result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy.","global","87.63"
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","38.17",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","245,760",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","105.77",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","440,664",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","940.60",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","365,568",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","105.77",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","440,664",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","96.74",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","1,762,656",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","WorkloadDistribution","","","","WorkloadImbalance","OPT","One or more L2 Slices have a much lower number of active cycles than the average number of active cycles. Maximum instance value is 59.03% above the average, while the minimum instance value is 91.81% below the average.","global","7.291"
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.04",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","103",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","89.39",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.03",
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 1229 excessive sectors (64% of the total 1927 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","7.877"
"5","236512","SpMV","127.0.0.1","236512  ""<default domain>:Cusparse SortR Cities.mtx 1 1 2:none:none:none:none:none:none"" ","","void cusparse::coomv_kernel<(unsigned int)256, (unsigned int)8, (bool)0, int, float, float, float, float>(cusparse::KernelCoeffs<T8>, T4, const T4 *, const T4 *, const T5 *, const T6 *, T7 *, T4 *, T8 *)","1","7","(256, 1, 1)","(1, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedSharedAccess","OPT","This kernel has uncoalesced shared accesses resulting in a total of 64 excessive wavefronts (33% of the total 192 wavefronts). Check the L1 Wavefronts Shared Excessive table for the primary source locations. The CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#shared-memory-in-matrix-multiplication-c-ab) has an example on optimizing shared memory accesses.","global","0.448"
