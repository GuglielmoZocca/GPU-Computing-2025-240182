"ID","Process ID","Process Name","Host Name","thread Domain:Push/Pop_Range:PL_Type:PL_Value:CLR_Type:Color:Msg_Type:Msg","Id:Domain:Start/Stop_Range:PL_Type:PL_Value:CLR_Type:Color:Msg_Type:Msg","Kernel Name","Context","Stream","Block Size","Grid Size","Device","CC","Section Name","Metric Name","Metric Unit","Metric Value","Rule Name","Rule Type","Rule Description","Estimated Speedup Type","Estimated Speedup"
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.21",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","929.99",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","1,340,717",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","35.07",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","27.03",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","msecond","1.44",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","36.16",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","26.72",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","1,300,205.86",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","43.11",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","OPT","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons.","",""
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","PM Sampling","Maximum Buffer Size","Mbyte","2.69",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","PM Sampling","Dropped Samples","sample","0",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","PM Sampling","Maximum Sampling Interval","cycle","160,000",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","PM Sampling","# Pass Groups","","4",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.77",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","1.72",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","44.46",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.78",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","44.46",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FMA is the highest-utilized pipeline (27.4%) based on active cycles, taking into account the rates of its different instructions. It executes 32-bit floating point (FADD, FMUL, FMAD, ...) and integer (IMUL, IMAD) operations. It is well-utilized, but should not be a bottleneck.","",""
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","252.20",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","35.07",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","31.50",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","5.05",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","34.95",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","31.50",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 26.6 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","5.925"
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","45.88",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.46",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","54.12",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","6.77",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.66",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.2 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 6.77 active warps per scheduler, but only an average of 0.66 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","54.12"
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","14.75",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","14.78",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","6.57",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","6.06",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 5.8 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory. This stall type represents about 39.5% of the total average of 14.7 cycles between issuing two instructions.","global","39.53"
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","WarpStateStats","","","","ThreadDivergence","OPT","Instructions are executed in warps, which are groups of 32 threads. Optimal instruction throughput is achieved if all 32 threads of a warp execute the same instruction. The chosen launch configuration, early thread completion, and divergent flow control can significantly lower the number of active threads in a warp per cycle. This kernel achieves an average of 6.6 threads being active per cycle. This is further reduced to 6.1 threads per warp due to predication. The compiler may use predication to avoid an actual branch. Instead, all instructions are scheduled, but a per-thread condition code or predicate controls which threads execute the instructions. Try to avoid different execution paths within a warp when possible.","global","34.95"
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","576,769.24",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","129,196,309",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","578,040.78",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","129,481,135",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","OPT","This kernel executes 0 fused and 8988126 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","13.68"
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Launch Statistics","Block Size","","32",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Launch Statistics","Grid Size","","594,380",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","16",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","65.54",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","256",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Launch Statistics","# SMs","SM","56",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Launch Statistics","Threads","thread","19,020,160",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Launch Statistics","Uses Green Context","","0",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","331.69",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","128",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","51",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","64",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","41.21",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","26.38",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Occupancy","","","","TheoreticalOccupancy","OPT","The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. This kernel's theoretical occupancy (50.0%) is limited by the number of blocks that can fit on the SM.","global","50"
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","473,411.50",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","42,035,712",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","1,300,205.86",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","75,079,564",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","1,290,294.73",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","62,278,464",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","1,300,205.86",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","75,079,564",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","1,259,895.96",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","300,318,256",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.17",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","22,288,570",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","94.45",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","4,536.20",
"0","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 1547901 excessive sectors (13% of the total 11953768 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","12.88"
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.21",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","929.98",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","1,343,434",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","35.00",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","26.97",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","msecond","1.44",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","36.07",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","26.67",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","1,303,342.73",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","43.03",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","OPT","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons.","",""
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","PM Sampling","Maximum Buffer Size","Mbyte","2.69",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","PM Sampling","Dropped Samples","sample","0",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","PM Sampling","Maximum Sampling Interval","cycle","160,000",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","PM Sampling","# Pass Groups","","4",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.77",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","1.72",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","44.35",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.77",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","44.35",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FMA is the highest-utilized pipeline (27.3%) based on active cycles, taking into account the rates of its different instructions. It executes 32-bit floating point (FADD, FMUL, FMAD, ...) and integer (IMUL, IMAD) operations. It is well-utilized, but should not be a bottleneck.","",""
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","251.70",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","35.00",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","31.44",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","5.05",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","34.96",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","31.44",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 26.6 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","5.913"
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","45.84",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.46",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","54.16",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","6.78",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.66",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.2 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 6.78 active warps per scheduler, but only an average of 0.66 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","54.16"
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","14.79",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","14.83",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","6.57",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","6.06",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 5.8 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory. This stall type represents about 39.3% of the total average of 14.8 cycles between issuing two instructions.","global","39.3"
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","WarpStateStats","","","","ThreadDivergence","OPT","Instructions are executed in warps, which are groups of 32 threads. Optimal instruction throughput is achieved if all 32 threads of a warp execute the same instruction. The chosen launch configuration, early thread completion, and divergent flow control can significantly lower the number of active threads in a warp per cycle. This kernel achieves an average of 6.6 threads being active per cycle. This is further reduced to 6.1 threads per warp due to predication. The compiler may use predication to avoid an actual branch. Instead, all instructions are scheduled, but a per-thread condition code or predicate controls which threads execute the instructions. Try to avoid different execution paths within a warp when possible.","global","34.88"
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","576,769.24",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","129,196,309",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","578,040.34",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","129,481,036",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","OPT","This kernel executes 0 fused and 8988126 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","13.65"
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Launch Statistics","Block Size","","32",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Launch Statistics","Grid Size","","594,380",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","16",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","65.54",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","256",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Launch Statistics","# SMs","SM","56",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Launch Statistics","Threads","thread","19,020,160",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Launch Statistics","Uses Green Context","","0",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","331.69",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","128",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","51",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","64",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","41.24",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","26.39",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Occupancy","","","","TheoreticalOccupancy","OPT","The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. This kernel's theoretical occupancy (50.0%) is limited by the number of blocks that can fit on the SM.","global","50"
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","473,430",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","42,121,728",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","1,303,342.73",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","75,231,786",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","1,290,830.98",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","62,404,848",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","1,303,342.73",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","75,231,786",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","1,261,121.21",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","300,927,144",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.17",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","22,288,570",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","94.45",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","4,536.20",
"1","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 1547901 excessive sectors (13% of the total 11953768 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","12.86"
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.21",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","929.98",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","1,342,217",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","35.03",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","27.00",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","msecond","1.44",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","36.06",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","26.72",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","1,303,784.16",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","43.07",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","OPT","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons.","",""
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","PM Sampling","Maximum Buffer Size","Mbyte","2.69",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","PM Sampling","Dropped Samples","sample","0",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","PM Sampling","Maximum Sampling Interval","cycle","160,000",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","PM Sampling","# Pass Groups","","4",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.77",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","1.72",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","44.34",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.77",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","44.34",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FMA is the highest-utilized pipeline (27.3%) based on active cycles, taking into account the rates of its different instructions. It executes 32-bit floating point (FADD, FMUL, FMAD, ...) and integer (IMUL, IMAD) operations. It is well-utilized, but should not be a bottleneck.","",""
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","251.93",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","35.03",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","31.47",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","5.05",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","34.98",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","31.47",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 26.6 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","5.918"
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","45.79",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.46",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","54.21",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","6.78",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.66",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.2 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 6.78 active warps per scheduler, but only an average of 0.66 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, avoid possible load imbalances due to highly different execution durations per warp. Reducing stalls indicated on the Warp State Statistics and Source Counters sections can help, too.","local","54.21"
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","14.81",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","14.84",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","6.57",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","6.06",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 5.8 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory. This stall type represents about 39.5% of the total average of 14.8 cycles between issuing two instructions.","global","39.47"
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","WarpStateStats","","","","ThreadDivergence","OPT","Instructions are executed in warps, which are groups of 32 threads. Optimal instruction throughput is achieved if all 32 threads of a warp execute the same instruction. The chosen launch configuration, early thread completion, and divergent flow control can significantly lower the number of active threads in a warp per cycle. This kernel achieves an average of 6.6 threads being active per cycle. This is further reduced to 6.1 threads per warp due to predication. The compiler may use predication to avoid an actual branch. Instead, all instructions are scheduled, but a per-thread condition code or predicate controls which threads execute the instructions. Try to avoid different execution paths within a warp when possible.","global","34.92"
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","576,769.24",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","129,196,309",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","578,040.78",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","129,481,135",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","OPT","This kernel executes 0 fused and 8988126 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","13.64"
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Launch Statistics","Block Size","","32",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Launch Statistics","Grid Size","","594,380",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","16",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","65.54",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","256",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Launch Statistics","# SMs","SM","56",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Launch Statistics","Threads","thread","19,020,160",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Launch Statistics","Uses Green Context","","0",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","331.69",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","128",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","51",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","64",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","41.26",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","26.41",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Occupancy","","","","TheoreticalOccupancy","OPT","The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. This kernel's theoretical occupancy (50.0%) is limited by the number of blocks that can fit on the SM.","global","50"
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","473,442.67",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","42,083,328",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","1,303,784.16",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","75,163,578",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","1,292,408.04",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","62,348,256",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","1,303,784.16",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","75,163,578",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","1,262,252.68",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","300,654,312",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.17",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","22,288,570",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","94.45",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","4,536.20",
"2","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(594380, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 1547901 excessive sectors (13% of the total 11953768 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","12.88"
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.21",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","930.01",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","916,988",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","49.89",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","39.51",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","985.98",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","50.29",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","36.96",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","909,772.34",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","62.61",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","OPT","Compute is more heavily utilized than Memory: Look at the Compute Workload Analysis section to see what the compute pipelines are spending their time doing. Also, consider whether any computation is redundant and could be reduced or moved to look-up tables.","",""
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","PM Sampling","Maximum Buffer Size","Mbyte","2.69",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","PM Sampling","Dropped Samples","sample","0",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","PM Sampling","Maximum Sampling Interval","cycle","160,000",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","PM Sampling","# Pass Groups","","4",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","2.52",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","2.50",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","63.10",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","2.52",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","63.10",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FMA is the highest-utilized pipeline (39.5%) based on active cycles, taking into account the rates of its different instructions. It executes 32-bit floating point (FADD, FMUL, FMAD, ...) and integer (IMUL, IMAD) operations. It is well-utilized, but should not be a bottleneck.","",""
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","368.68",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","49.89",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","46.09",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","6.24",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","33.51",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","46.09",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 26.6 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","8.43"
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","63.30",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.63",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","36.70",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","10.25",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1.08",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","16.19",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","16.21",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","6.62",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","6.10",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 6.4 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory. This stall type represents about 39.8% of the total average of 16.2 cycles between issuing two instructions.","local","39.76"
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","WarpStateStats","","","","ThreadDivergence","OPT","Instructions are executed in warps, which are groups of 32 threads. Optimal instruction throughput is achieved if all 32 threads of a warp execute the same instruction. The chosen launch configuration, early thread completion, and divergent flow control can significantly lower the number of active threads in a warp per cycle. This kernel achieves an average of 6.6 threads being active per cycle. This is further reduced to 6.1 threads per warp due to predication. The compiler may use predication to avoid an actual branch. Instead, all instructions are scheduled, but a per-thread condition code or predicate controls which threads execute the instructions. Try to avoid different execution paths within a warp when possible.","global","50.68"
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","573,382.18",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","128,437,608",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","574,080.03",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","128,593,926",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","OPT","This kernel executes 0 fused and 9125708 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","19.76"
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Launch Statistics","Block Size","","64",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Launch Statistics","Grid Size","","297,190",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","16",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","65.54",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","512",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Launch Statistics","# SMs","SM","56",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Launch Statistics","Threads","thread","19,020,160",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Launch Statistics","Uses Green Context","","0",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","165.84",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","64",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","42",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","32",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","64",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","100",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","64.18",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","41.08",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Occupancy","","","","AchievedOccupancy","OPT","The difference between calculated theoretical (100.0%) and measured achieved occupancy (64.2%) can be the result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy.","local","35.82"
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","473,325.17",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","28,748,800",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","909,772.34",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","51,350,460",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","875,643.67",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","42,595,440",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","909,772.34",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","51,350,460",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","906,960.52",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","205,401,840",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.17",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","21,582,462",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","96.99",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","2,475.52",
"3","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 1547356 excessive sectors (13% of the total 11821727 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","12.92"
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.21",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","930.01",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","918,869",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","49.79",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","39.43",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","988",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","50.19",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","36.91",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","911,536.39",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","62.48",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","OPT","Compute is more heavily utilized than Memory: Look at the Compute Workload Analysis section to see what the compute pipelines are spending their time doing. Also, consider whether any computation is redundant and could be reduced or moved to look-up tables.","",""
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","PM Sampling","Maximum Buffer Size","Mbyte","2.69",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","PM Sampling","Dropped Samples","sample","0",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","PM Sampling","Maximum Sampling Interval","cycle","160,000",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","PM Sampling","# Pass Groups","","4",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","2.52",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","2.50",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","62.98",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","2.52",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","62.98",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FMA is the highest-utilized pipeline (39.4%) based on active cycles, taking into account the rates of its different instructions. It executes 32-bit floating point (FADD, FMUL, FMAD, ...) and integer (IMUL, IMAD) operations. It is well-utilized, but should not be a bottleneck.","",""
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","367.87",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","49.79",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","46.00",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","6.23",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","33.49",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","46.00",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 26.6 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","8.413"
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","63.15",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.63",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","36.85",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","10.25",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1.08",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","16.23",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","16.25",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","6.62",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","6.10",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 6.4 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory. This stall type represents about 39.7% of the total average of 16.2 cycles between issuing two instructions.","local","39.67"
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","WarpStateStats","","","","ThreadDivergence","OPT","Instructions are executed in warps, which are groups of 32 threads. Optimal instruction throughput is achieved if all 32 threads of a warp execute the same instruction. The chosen launch configuration, early thread completion, and divergent flow control can significantly lower the number of active threads in a warp per cycle. This kernel achieves an average of 6.6 threads being active per cycle. This is further reduced to 6.1 threads per warp due to predication. The compiler may use predication to avoid an actual branch. Instead, all instructions are scheduled, but a per-thread condition code or predicate controls which threads execute the instructions. Try to avoid different execution paths within a warp when possible.","global","50.57"
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","573,382.18",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","128,437,608",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","574,080.48",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","128,594,027",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","OPT","This kernel executes 0 fused and 9125708 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","19.72"
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Launch Statistics","Block Size","","64",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Launch Statistics","Grid Size","","297,190",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","16",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","65.54",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","512",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Launch Statistics","# SMs","SM","56",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Launch Statistics","Threads","thread","19,020,160",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Launch Statistics","Uses Green Context","","0",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","165.84",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","64",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","42",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","32",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","64",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","100",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","64.22",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","41.10",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Occupancy","","","","AchievedOccupancy","OPT","The difference between calculated theoretical (100.0%) and measured achieved occupancy (64.2%) can be the result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy.","local","35.78"
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","473,244.50",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","28,808,192",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","911,536.39",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","51,455,656",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","875,607.79",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","42,682,656",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","911,536.39",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","51,455,656",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","909,015.35",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","205,822,624",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.17",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","21,582,462",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","96.99",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","2,475.52",
"4","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 1547356 excessive sectors (13% of the total 11821727 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","12.89"
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.21",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","930.02",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","915,898",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","49.95",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","39.56",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","984.80",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","50.34",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","37.00",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","908,774.25",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","62.68",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","OPT","Compute is more heavily utilized than Memory: Look at the Compute Workload Analysis section to see what the compute pipelines are spending their time doing. Also, consider whether any computation is redundant and could be reduced or moved to look-up tables.","",""
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","PM Sampling","Maximum Buffer Size","Mbyte","2.69",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","PM Sampling","Dropped Samples","sample","0",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","PM Sampling","Maximum Sampling Interval","cycle","160,000",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","PM Sampling","# Pass Groups","","4",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","2.52",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","2.50",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","63.17",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","2.53",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","63.17",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FMA is the highest-utilized pipeline (39.6%) based on active cycles, taking into account the rates of its different instructions. It executes 32-bit floating point (FADD, FMUL, FMAD, ...) and integer (IMUL, IMAD) operations. It is well-utilized, but should not be a bottleneck.","",""
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","369.07",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","49.95",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","46.15",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","6.23",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","33.52",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","46.15",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 26.6 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","8.44"
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","63.31",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.63",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","36.69",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","10.25",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1.08",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","16.19",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","16.21",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","6.62",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","6.10",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 6.4 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory. This stall type represents about 39.7% of the total average of 16.2 cycles between issuing two instructions.","local","39.72"
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","WarpStateStats","","","","ThreadDivergence","OPT","Instructions are executed in warps, which are groups of 32 threads. Optimal instruction throughput is achieved if all 32 threads of a warp execute the same instruction. The chosen launch configuration, early thread completion, and divergent flow control can significantly lower the number of active threads in a warp per cycle. This kernel achieves an average of 6.6 threads being active per cycle. This is further reduced to 6.1 threads per warp due to predication. The compiler may use predication to avoid an actual branch. Instead, all instructions are scheduled, but a per-thread condition code or predicate controls which threads execute the instructions. Try to avoid different execution paths within a warp when possible.","global","50.74"
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","573,382.18",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","128,437,608",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","574,080.52",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","128,594,037",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","OPT","This kernel executes 0 fused and 9125708 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","19.78"
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Launch Statistics","Block Size","","64",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Launch Statistics","Grid Size","","297,190",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","16",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","65.54",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","512",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Launch Statistics","# SMs","SM","56",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Launch Statistics","Threads","thread","19,020,160",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Launch Statistics","Uses Green Context","","0",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","165.84",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","64",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","42",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","32",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","64",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","100",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","64.26",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","41.13",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Occupancy","","","","AchievedOccupancy","OPT","The difference between calculated theoretical (100.0%) and measured achieved occupancy (64.3%) can be the result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy.","local","35.74"
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","473,261",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","28,713,984",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","908,774.25",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","51,289,448",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","874,157.65",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","42,544,848",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","908,774.25",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","51,289,448",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","906,723.31",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","205,157,792",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.17",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","21,582,462",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","96.99",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","2,475.52",
"5","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(297190, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 1547356 excessive sectors (13% of the total 11821727 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","12.91"
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.21",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","929.98",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","865,891",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","51.99",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","41.83",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","931.07",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","52.67",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","38.49",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","854,612.71",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","66.10",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","OPT","Compute is more heavily utilized than Memory: Look at the Compute Workload Analysis section to see what the compute pipelines are spending their time doing. Also, consider whether any computation is redundant and could be reduced or moved to look-up tables.","",""
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","PM Sampling","Maximum Buffer Size","Mbyte","2.69",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","PM Sampling","Dropped Samples","sample","0",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","PM Sampling","Maximum Sampling Interval","cycle","160,000",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","PM Sampling","# Pass Groups","","4",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","2.68",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","2.64",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","66.97",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","2.68",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","66.97",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FMA is the highest-utilized pipeline (42.3%) based on active cycles, taking into account the rates of its different instructions. It executes 32-bit floating point (FADD, FMUL, FMAD, ...) and integer (IMUL, IMAD) operations. It is well-utilized, but should not be a bottleneck.","",""
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","390.31",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","51.99",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","48.85",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","6.89",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","32.75",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","48.85",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 26.6 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","8.784"
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","67.28",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.67",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","32.72",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","11.35",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1.29",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","16.87",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","16.89",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","6.64",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","6.12",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 6.3 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory. This stall type represents about 37.5% of the total average of 16.9 cycles between issuing two instructions.","local","37.51"
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","WarpStateStats","","","","ThreadDivergence","OPT","Instructions are executed in warps, which are groups of 32 threads. Optimal instruction throughput is achieved if all 32 threads of a warp execute the same instruction. The chosen launch configuration, early thread completion, and divergent flow control can significantly lower the number of active threads in a warp per cycle. This kernel achieves an average of 6.6 threads being active per cycle. This is further reduced to 6.1 threads per warp due to predication. The compiler may use predication to avoid an actual branch. Instead, all instructions are scheduled, but a per-thread condition code or predicate controls which threads execute the instructions. Try to avoid different execution paths within a warp when possible.","global","53.47"
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","571,931.72",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","128,112,706",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","572,362.12",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","128,209,116",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","OPT","This kernel executes 0 fused and 9198846 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","21.15"
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Launch Statistics","Block Size","","128",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Launch Statistics","Grid Size","","148,595",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","16",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","65.54",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","Kbyte/block","1.02",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Launch Statistics","# SMs","SM","56",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Launch Statistics","Threads","thread","19,020,160",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Launch Statistics","Uses Green Context","","0",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","165.84",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","32",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","32",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","16",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","64",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","100",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","70.99",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","45.43",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Occupancy","","","","AchievedOccupancy","OPT","The difference between calculated theoretical (100.0%) and measured achieved occupancy (71.0%) can be the result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy.","local","29.01"
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","473,186.17",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","27,148,288",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","854,612.71",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","48,489,336",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","817,756.85",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","40,222,320",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","854,612.71",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","48,489,336",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","850,706.75",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","193,957,344",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.17",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","21,238,695",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","98.25",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","1,445.21",
"6","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 1547079 excessive sectors (13% of the total 11755738 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","12.84"
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.21",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","929.96",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","865,158",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","52.03",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","41.87",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","930.30",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","52.70",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","38.51",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","854,098.50",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","66.16",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","OPT","Compute is more heavily utilized than Memory: Look at the Compute Workload Analysis section to see what the compute pipelines are spending their time doing. Also, consider whether any computation is redundant and could be reduced or moved to look-up tables.","",""
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","PM Sampling","Maximum Buffer Size","Mbyte","2.69",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","PM Sampling","Dropped Samples","sample","0",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","PM Sampling","Maximum Sampling Interval","cycle","160,000",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","PM Sampling","# Pass Groups","","4",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","2.68",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","2.64",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","67.01",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","2.68",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","67.01",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FMA is the highest-utilized pipeline (42.3%) based on active cycles, taking into account the rates of its different instructions. It executes 32-bit floating point (FADD, FMUL, FMAD, ...) and integer (IMUL, IMAD) operations. It is well-utilized, but should not be a bottleneck.","",""
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","390.66",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","52.03",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","48.89",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","6.90",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","32.74",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","48.89",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 26.6 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","8.791"
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","67.28",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.67",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","32.72",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","11.35",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1.29",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","16.87",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","16.89",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","6.64",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","6.12",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 6.3 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory. This stall type represents about 37.5% of the total average of 16.9 cycles between issuing two instructions.","local","37.54"
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","WarpStateStats","","","","ThreadDivergence","OPT","Instructions are executed in warps, which are groups of 32 threads. Optimal instruction throughput is achieved if all 32 threads of a warp execute the same instruction. The chosen launch configuration, early thread completion, and divergent flow control can significantly lower the number of active threads in a warp per cycle. This kernel achieves an average of 6.6 threads being active per cycle. This is further reduced to 6.1 threads per warp due to predication. The compiler may use predication to avoid an actual branch. Instead, all instructions are scheduled, but a per-thread condition code or predicate controls which threads execute the instructions. Try to avoid different execution paths within a warp when possible.","global","53.52"
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","571,931.72",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","128,112,706",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","572,363.36",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","128,209,393",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","OPT","This kernel executes 0 fused and 9198846 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","21.17"
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Launch Statistics","Block Size","","128",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Launch Statistics","Grid Size","","148,595",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","16",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","65.54",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","Kbyte/block","1.02",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Launch Statistics","# SMs","SM","56",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Launch Statistics","Threads","thread","19,020,160",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Launch Statistics","Uses Green Context","","0",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","165.84",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","32",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","32",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","16",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","64",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","100",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","71.04",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","45.46",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Occupancy","","","","AchievedOccupancy","OPT","The difference between calculated theoretical (100.0%) and measured achieved occupancy (71.0%) can be the result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy.","local","28.96"
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","473,223.33",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","27,125,248",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","854,098.50",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","48,448,218",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","818,853.46",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","40,188,240",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","854,098.50",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","48,448,218",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","850,720.99",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","193,792,872",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.17",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","21,238,695",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","98.25",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","1,445.21",
"7","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 1547079 excessive sectors (13% of the total 11755738 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","12.87"
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.21",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","929.99",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","864,528",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","52.07",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","41.90",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","929.60",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","52.75",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","38.59",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","853,386.46",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","66.21",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","OPT","Compute is more heavily utilized than Memory: Look at the Compute Workload Analysis section to see what the compute pipelines are spending their time doing. Also, consider whether any computation is redundant and could be reduced or moved to look-up tables.","",""
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","PM Sampling","Maximum Buffer Size","Mbyte","2.69",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","PM Sampling","Dropped Samples","sample","0",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","PM Sampling","Maximum Sampling Interval","cycle","160,000",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","PM Sampling","# Pass Groups","","4",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","2.68",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","2.65",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","67.07",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","2.68",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","67.07",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FMA is the highest-utilized pipeline (42.4%) based on active cycles, taking into account the rates of its different instructions. It executes 32-bit floating point (FADD, FMUL, FMAD, ...) and integer (IMUL, IMAD) operations. It is well-utilized, but should not be a bottleneck.","",""
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","390.96",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","52.07",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","48.93",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","6.88",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","32.71",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","48.93",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 26.6 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","8.797"
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","67.33",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.67",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","32.67",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","11.34",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","1.29",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","16.85",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","16.86",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","6.64",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","6.12",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 6.3 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory. This stall type represents about 37.6% of the total average of 16.8 cycles between issuing two instructions.","local","37.64"
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","WarpStateStats","","","","ThreadDivergence","OPT","Instructions are executed in warps, which are groups of 32 threads. Optimal instruction throughput is achieved if all 32 threads of a warp execute the same instruction. The chosen launch configuration, early thread completion, and divergent flow control can significantly lower the number of active threads in a warp per cycle. This kernel achieves an average of 6.6 threads being active per cycle. This is further reduced to 6.1 threads per warp due to predication. The compiler may use predication to avoid an actual branch. Instead, all instructions are scheduled, but a per-thread condition code or predicate controls which threads execute the instructions. Try to avoid different execution paths within a warp when possible.","global","53.55"
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","571,931.72",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","128,112,706",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","572,362.22",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","128,209,138",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","OPT","This kernel executes 0 fused and 9198846 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","21.18"
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Launch Statistics","Block Size","","128",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Launch Statistics","Grid Size","","148,595",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","16",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","65.54",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","Kbyte/block","1.02",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Launch Statistics","# SMs","SM","56",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Launch Statistics","Threads","thread","19,020,160",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Launch Statistics","Uses Green Context","","0",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","165.84",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","32",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","32",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","16",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","64",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","100",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","70.99",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","45.44",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Occupancy","","","","AchievedOccupancy","OPT","The difference between calculated theoretical (100.0%) and measured achieved occupancy (71.0%) can be the result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy.","local","29.01"
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","473,228.17",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","27,105,792",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","853,386.46",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","48,412,924",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","818,520.31",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","40,158,960",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","853,386.46",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","48,412,924",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","850,077.88",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","193,651,696",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.17",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","21,238,695",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","98.25",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","1,445.21",
"8","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(148595, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 1547079 excessive sectors (13% of the total 11755738 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","12.88"
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.21",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","929.97",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","1,069,644",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","41.68",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","33.86",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","msecond","1.15",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","42.20",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","30.97",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","1,056,421.29",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","53.43",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","OPT","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons.","",""
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","PM Sampling","Maximum Buffer Size","Mbyte","2.75",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","PM Sampling","Dropped Samples","sample","0",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","PM Sampling","Maximum Sampling Interval","cycle","160,000",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","PM Sampling","# Pass Groups","","4",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","2.16",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","2.14",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","54.10",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","2.16",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","54.10",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FMA is the highest-utilized pipeline (34.3%) based on active cycles, taking into account the rates of its different instructions. It executes 32-bit floating point (FADD, FMUL, FMAD, ...) and integer (IMUL, IMAD) operations. It is well-utilized, but should not be a bottleneck.","",""
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","315.96",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","41.68",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","39.56",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","7.35",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","32.28",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","39.56",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 26.6 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","7.042"
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","54.34",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.54",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","45.66",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","8.84",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.83",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 1.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 8.84 active warps per scheduler, but only an average of 0.83 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, reduce the time the active warps are stalled by inspecting the top stall reasons on the Warp State Statistics and Source Counters sections.","local","45.66"
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","16.28",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","16.28",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","6.65",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","6.12",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 6.0 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory. This stall type represents about 37.0% of the total average of 16.3 cycles between issuing two instructions.","global","37.02"
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","WarpStateStats","","","","ThreadDivergence","OPT","Instructions are executed in warps, which are groups of 32 threads. Optimal instruction throughput is achieved if all 32 threads of a warp execute the same instruction. The chosen launch configuration, early thread completion, and divergent flow control can significantly lower the number of active threads in a warp per cycle. This kernel achieves an average of 6.6 threads being active per cycle. This is further reduced to 6.1 threads per warp due to predication. The compiler may use predication to avoid an actual branch. Instead, all instructions are scheduled, but a per-thread condition code or predicate controls which threads execute the instructions. Try to avoid different execution paths within a warp when possible.","global","43.2"
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","571,202.37",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","127,949,331",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","571,503.29",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","128,016,736",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","OPT","This kernel executes 0 fused and 9235336 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","17.16"
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Launch Statistics","Block Size","","256",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Launch Statistics","Grid Size","","74,298",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","16",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","65.54",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","Kbyte/block","2.05",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Launch Statistics","# SMs","SM","56",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Launch Statistics","Threads","thread","19,020,288",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Launch Statistics","Uses Green Context","","0",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","165.84",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","16",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","21",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","8",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","64",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","100",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","55.33",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","35.41",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Occupancy","","","","AchievedOccupancy","OPT","The difference between calculated theoretical (100.0%) and measured achieved occupancy (55.3%) can be the result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy.","global","44.67"
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","473,182.50",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","33,537,024",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","1,056,421.29",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","59,899,378",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","975,353.46",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","49,686,864",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","1,056,421.29",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","59,899,378",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","1,051,628.23",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","239,597,512",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.16",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","21,066,691",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","98.88",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","930.18",
"9","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 1546907 excessive sectors (13% of the total 11722714 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","12.43"
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.21",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","929.97",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","1,070,679",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","41.65",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","33.83",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","msecond","1.15",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","42.18",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","30.96",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","1,057,048.39",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","53.38",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","OPT","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons.","",""
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","PM Sampling","Maximum Buffer Size","Mbyte","2.75",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","PM Sampling","Dropped Samples","sample","0",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","PM Sampling","Maximum Sampling Interval","cycle","160,000",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","PM Sampling","# Pass Groups","","4",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","2.16",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","2.13",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","54.07",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","2.16",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","54.07",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FMA is the highest-utilized pipeline (34.3%) based on active cycles, taking into account the rates of its different instructions. It executes 32-bit floating point (FADD, FMUL, FMAD, ...) and integer (IMUL, IMAD) operations. It is well-utilized, but should not be a bottleneck.","",""
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","315.70",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","41.65",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","39.52",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","7.36",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","32.30",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","39.52",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 26.6 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","7.036"
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","54.35",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.54",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","45.65",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","8.84",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.83",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 1.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 8.84 active warps per scheduler, but only an average of 0.83 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, reduce the time the active warps are stalled by inspecting the top stall reasons on the Warp State Statistics and Source Counters sections.","local","45.65"
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","16.26",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","16.27",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","6.65",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","6.12",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 6.0 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory. This stall type represents about 37.1% of the total average of 16.3 cycles between issuing two instructions.","global","37.14"
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","WarpStateStats","","","","ThreadDivergence","OPT","Instructions are executed in warps, which are groups of 32 threads. Optimal instruction throughput is achieved if all 32 threads of a warp execute the same instruction. The chosen launch configuration, early thread completion, and divergent flow control can significantly lower the number of active threads in a warp per cycle. This kernel achieves an average of 6.6 threads being active per cycle. This is further reduced to 6.1 threads per warp due to predication. The compiler may use predication to avoid an actual branch. Instead, all instructions are scheduled, but a per-thread condition code or predicate controls which threads execute the instructions. Try to avoid different execution paths within a warp when possible.","global","43.16"
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","571,202.37",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","127,949,331",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","571,502.71",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","128,016,606",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","OPT","This kernel executes 0 fused and 9235336 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","17.15"
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Launch Statistics","Block Size","","256",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Launch Statistics","Grid Size","","74,298",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","16",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","65.54",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","Kbyte/block","2.05",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Launch Statistics","# SMs","SM","56",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Launch Statistics","Threads","thread","19,020,288",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Launch Statistics","Uses Green Context","","0",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","165.84",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","16",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","21",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","8",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","64",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","100",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","55.24",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","35.36",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Occupancy","","","","AchievedOccupancy","OPT","The difference between calculated theoretical (100.0%) and measured achieved occupancy (55.2%) can be the result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy.","global","44.76"
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","473,253.67",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","33,570,304",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","1,057,048.39",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","59,957,240",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","974,332.19",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","49,734,864",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","1,057,048.39",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","59,957,240",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","1,051,517.12",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","239,828,960",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.16",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","21,066,691",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","98.88",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","930.18",
"10","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 1546907 excessive sectors (13% of the total 11722714 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","12.41"
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.21",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","929.96",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","1,070,373",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","41.66",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","33.84",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","msecond","1.15",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","42.20",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","31.01",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","1,056,685.39",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","53.39",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","OPT","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons.","",""
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","PM Sampling","Maximum Buffer Size","Mbyte","2.75",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","PM Sampling","Dropped Samples","sample","0",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","PM Sampling","Maximum Sampling Interval","cycle","160,000",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","PM Sampling","# Pass Groups","","4",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","2.16",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","2.13",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","54.08",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","2.16",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","54.08",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FMA is the highest-utilized pipeline (34.3%) based on active cycles, taking into account the rates of its different instructions. It executes 32-bit floating point (FADD, FMUL, FMAD, ...) and integer (IMUL, IMAD) operations. It is well-utilized, but should not be a bottleneck.","",""
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","315.78",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","41.66",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","39.53",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","7.36",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","32.26",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","39.53",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 26.6 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","7.038"
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","54.38",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.54",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","45.62",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","8.83",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.83",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 1.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 8.83 active warps per scheduler, but only an average of 0.83 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, reduce the time the active warps are stalled by inspecting the top stall reasons on the Warp State Statistics and Source Counters sections.","local","45.62"
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","16.24",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","16.25",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","6.65",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","6.12",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 6.1 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory. This stall type represents about 37.3% of the total average of 16.2 cycles between issuing two instructions.","global","37.29"
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","WarpStateStats","","","","ThreadDivergence","OPT","Instructions are executed in warps, which are groups of 32 threads. Optimal instruction throughput is achieved if all 32 threads of a warp execute the same instruction. The chosen launch configuration, early thread completion, and divergent flow control can significantly lower the number of active threads in a warp per cycle. This kernel achieves an average of 6.6 threads being active per cycle. This is further reduced to 6.1 threads per warp due to predication. The compiler may use predication to avoid an actual branch. Instead, all instructions are scheduled, but a per-thread condition code or predicate controls which threads execute the instructions. Try to avoid different execution paths within a warp when possible.","global","43.18"
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","571,202.37",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","127,949,331",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","571,503.21",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","128,016,718",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","OPT","This kernel executes 0 fused and 9235336 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","17.16"
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Launch Statistics","Block Size","","256",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Launch Statistics","Grid Size","","74,298",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","16",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","65.54",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","Kbyte/block","2.05",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Launch Statistics","# SMs","SM","56",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Launch Statistics","Threads","thread","19,020,288",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Launch Statistics","Uses Green Context","","0",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","165.84",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","16",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","21",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","8",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","64",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","100",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","55.20",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","35.33",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Occupancy","","","","AchievedOccupancy","OPT","The difference between calculated theoretical (100.0%) and measured achieved occupancy (55.2%) can be the result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy.","global","44.8"
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","473,248",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","33,559,552",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","1,056,685.39",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","59,940,048",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","974,362.60",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","49,720,608",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","1,056,685.39",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","59,940,048",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","1,050,996.03",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","239,760,192",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.16",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","21,066,691",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","98.88",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","930.18",
"11","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(74298, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 1546907 excessive sectors (13% of the total 11722714 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","12.41"
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.21",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","929.97",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","1,580,012",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","28.02",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","22.92",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","msecond","1.70",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","28.25",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","21.11",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","1,567,151.14",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","36.14",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","OPT","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons.","",""
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","PM Sampling","Maximum Buffer Size","Mbyte","2.82",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","PM Sampling","Dropped Samples","sample","0",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","PM Sampling","Maximum Sampling Interval","cycle","160,000",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","PM Sampling","# Pass Groups","","4",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.46",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","1.45",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","36.44",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.46",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","36.44",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FMA is the highest-utilized pipeline (23.2%) based on active cycles, taking into account the rates of its different instructions. It executes 32-bit floating point (FADD, FMUL, FMAD, ...) and integer (IMUL, IMAD) operations. It is well-utilized, but should not be a bottleneck.","",""
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","213.90",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","28.02",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","26.78",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","7.68",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","31.97",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","26.78",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 26.6 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","4.734"
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","36.79",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.37",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","63.21",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","5.80",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.50",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.7 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 5.80 active warps per scheduler, but only an average of 0.50 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, reduce the time the active warps are stalled by inspecting the top stall reasons on the Warp State Statistics and Source Counters sections.","local","63.21"
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","15.78",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","15.78",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","6.65",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","6.13",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 5.7 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory. This stall type represents about 36.1% of the total average of 15.8 cycles between issuing two instructions.","global","36.11"
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","WarpStateStats","","","","ThreadDivergence","OPT","Instructions are executed in warps, which are groups of 32 threads. Optimal instruction throughput is achieved if all 32 threads of a warp execute the same instruction. The chosen launch configuration, early thread completion, and divergent flow control can significantly lower the number of active threads in a warp per cycle. This kernel achieves an average of 6.7 threads being active per cycle. This is further reduced to 6.1 threads per warp due to predication. The compiler may use predication to avoid an actual branch. Instead, all instructions are scheduled, but a per-thread condition code or predicate controls which threads execute the instructions. Try to avoid different execution paths within a warp when possible.","global","29.22"
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","570,829.24",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","127,865,750",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","571,063.43",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","127,918,208",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","OPT","This kernel executes 0 fused and 9253428 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","11.58"
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Launch Statistics","Block Size","","512",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Launch Statistics","Grid Size","","37,149",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","16",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","65.54",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","Kbyte/block","4.10",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Launch Statistics","# SMs","SM","56",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Launch Statistics","Threads","thread","19,020,288",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Launch Statistics","Uses Green Context","","0",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","165.84",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","8",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","12",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","4",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","64",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","100",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","36.13",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","23.12",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Occupancy","","","","AchievedOccupancy","OPT","The difference between calculated theoretical (100.0%) and measured achieved occupancy (36.1%) can be the result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy.","global","63.21"
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","473,181",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","49,540,096",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","1,567,151.14",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","88,479,818",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","1,296,098.60",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","73,394,112",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","1,567,151.14",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","88,479,818",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","1,552,099.69",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","353,919,272",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.16",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","20,980,390",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","99.19",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","672.87",
"12","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 1546837 excessive sectors (13% of the total 11706195 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","11.2"
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.21",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","929.97",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","1,580,640",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","28.01",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","22.92",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","msecond","1.70",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","28.23",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","21.10",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","1,568,141.43",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","36.13",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","OPT","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons.","",""
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","PM Sampling","Maximum Buffer Size","Mbyte","2.82",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","PM Sampling","Dropped Samples","sample","0",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","PM Sampling","Maximum Sampling Interval","cycle","160,000",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","PM Sampling","# Pass Groups","","4",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.46",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","1.44",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","36.42",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.46",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","36.42",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FMA is the highest-utilized pipeline (23.2%) based on active cycles, taking into account the rates of its different instructions. It executes 32-bit floating point (FADD, FMUL, FMAD, ...) and integer (IMUL, IMAD) operations. It is well-utilized, but should not be a bottleneck.","",""
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","213.84",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","28.01",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","26.77",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","7.66",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","31.94",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","26.77",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 26.6 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","4.732"
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","36.80",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.37",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","63.20",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","5.81",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.50",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.7 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 5.81 active warps per scheduler, but only an average of 0.50 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, reduce the time the active warps are stalled by inspecting the top stall reasons on the Warp State Statistics and Source Counters sections.","local","63.2"
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","15.78",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","15.79",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","6.65",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","6.13",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 5.7 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory. This stall type represents about 36.3% of the total average of 15.8 cycles between issuing two instructions.","global","36.25"
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","WarpStateStats","","","","ThreadDivergence","OPT","Instructions are executed in warps, which are groups of 32 threads. Optimal instruction throughput is achieved if all 32 threads of a warp execute the same instruction. The chosen launch configuration, early thread completion, and divergent flow control can significantly lower the number of active threads in a warp per cycle. This kernel achieves an average of 6.7 threads being active per cycle. This is further reduced to 6.1 threads per warp due to predication. The compiler may use predication to avoid an actual branch. Instead, all instructions are scheduled, but a per-thread condition code or predicate controls which threads execute the instructions. Try to avoid different execution paths within a warp when possible.","global","29.21"
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","570,829.24",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","127,865,750",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","571,063.59",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","127,918,244",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","OPT","This kernel executes 0 fused and 9253428 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","11.58"
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Launch Statistics","Block Size","","512",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Launch Statistics","Grid Size","","37,149",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","16",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","65.54",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","Kbyte/block","4.10",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Launch Statistics","# SMs","SM","56",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Launch Statistics","Threads","thread","19,020,288",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Launch Statistics","Uses Green Context","","0",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","165.84",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","8",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","12",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","4",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","64",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","100",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","36.11",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","23.11",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Occupancy","","","","AchievedOccupancy","OPT","The difference between calculated theoretical (100.0%) and measured achieved occupancy (36.1%) can be the result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy.","global","63.2"
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","473,254.50",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","49,559,936",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","1,568,141.43",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","88,514,888",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","1,290,323.65",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","73,423,104",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","1,568,141.43",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","88,514,888",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","1,551,668.30",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","354,059,552",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.16",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","20,980,390",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","99.19",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","672.87",
"13","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 1546837 excessive sectors (13% of the total 11706195 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","11.15"
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.21",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","929.97",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","1,579,180",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","28.03",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","22.94",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","msecond","1.70",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","28.26",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","21.11",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","1,566,832.45",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","36.16",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","OPT","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons.","",""
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","PM Sampling","Maximum Buffer Size","Mbyte","2.82",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","PM Sampling","Dropped Samples","sample","0",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","PM Sampling","Maximum Sampling Interval","cycle","160,000",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","PM Sampling","# Pass Groups","","4",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","1.46",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","1.45",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","36.45",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","1.46",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","36.45",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","INF","FMA is the highest-utilized pipeline (23.2%) based on active cycles, taking into account the rates of its different instructions. It executes 32-bit floating point (FADD, FMUL, FMAD, ...) and integer (IMUL, IMAD) operations. It is well-utilized, but should not be a bottleneck.","",""
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","214.03",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","28.03",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","26.80",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","7.67",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","31.95",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","26.80",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 26.6 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","4.737"
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","36.55",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.37",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","63.45",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","5.77",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.50",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 2.7 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 5.77 active warps per scheduler, but only an average of 0.50 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, reduce the time the active warps are stalled by inspecting the top stall reasons on the Warp State Statistics and Source Counters sections.","local","63.45"
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","15.78",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","15.79",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","6.65",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","6.13",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 5.7 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory. This stall type represents about 36.2% of the total average of 15.8 cycles between issuing two instructions.","global","36.16"
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","WarpStateStats","","","","ThreadDivergence","OPT","Instructions are executed in warps, which are groups of 32 threads. Optimal instruction throughput is achieved if all 32 threads of a warp execute the same instruction. The chosen launch configuration, early thread completion, and divergent flow control can significantly lower the number of active threads in a warp per cycle. This kernel achieves an average of 6.7 threads being active per cycle. This is further reduced to 6.1 threads per warp due to predication. The compiler may use predication to avoid an actual branch. Instead, all instructions are scheduled, but a per-thread condition code or predicate controls which threads execute the instructions. Try to avoid different execution paths within a warp when possible.","global","29.24"
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","570,829.24",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","127,865,750",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","571,063.43",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","127,918,208",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","OPT","This kernel executes 0 fused and 9253428 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","11.59"
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Launch Statistics","Block Size","","512",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Launch Statistics","Grid Size","","37,149",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","16",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","65.54",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","Kbyte/block","4.10",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Launch Statistics","# SMs","SM","56",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Launch Statistics","Threads","thread","19,020,288",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Launch Statistics","Uses Green Context","","0",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","165.84",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","8",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","12",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","4",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","64",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","100",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","36.16",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","23.14",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Occupancy","","","","AchievedOccupancy","OPT","The difference between calculated theoretical (100.0%) and measured achieved occupancy (36.2%) can be the result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy.","global","63.45"
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","473,226.83",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","49,513,216",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","1,566,832.45",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","88,433,226",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","1,299,544.44",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","73,355,424",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","1,566,832.45",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","88,433,226",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","1,562,541.92",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","353,732,904",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.16",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","20,980,390",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","99.19",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","672.87",
"14","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(37149, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 1546837 excessive sectors (13% of the total 11706195 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","11.24"
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.21",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","929.99",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","5,289,057",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","8.31",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","6.85",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","msecond","5.69",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","8.36",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","6.42",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","5,255,128.64",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","10.79",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","OPT","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons.","",""
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","PM Sampling","Maximum Buffer Size","Mbyte","3.60",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","PM Sampling","Dropped Samples","sample","0",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","PM Sampling","Maximum Sampling Interval","cycle","320,000",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","PM Sampling","# Pass Groups","","4",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.43",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.43",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","10.86",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.43",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","10.86",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","All compute pipelines are under-utilized. Either this kernel is very small or it doesn't issue enough warps per scheduler. Check the Launch Statistics and Scheduler Statistics sections for further details.","local","93.09"
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","63.94",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","8.31",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","8.00",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","7.94",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","31.72",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","8.00",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 26.6 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","1.403"
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","14.34",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.14",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","85.66",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","2.15",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.19",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 7.0 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 2.15 active warps per scheduler, but only an average of 0.19 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, reduce the time the active warps are stalled by inspecting the top stall reasons on the Warp State Statistics and Source Counters sections.","local","85.66"
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","15.02",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","15.03",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","6.66",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","6.13",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 5.0 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory. This stall type represents about 33.5% of the total average of 15.0 cycles between issuing two instructions.","global","33.53"
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","WarpStateStats","","","","ThreadDivergence","OPT","Instructions are executed in warps, which are groups of 32 threads. Optimal instruction throughput is achieved if all 32 threads of a warp execute the same instruction. The chosen launch configuration, early thread completion, and divergent flow control can significantly lower the number of active threads in a warp per cycle. This kernel achieves an average of 6.7 threads being active per cycle. This is further reduced to 6.1 threads per warp due to predication. The compiler may use predication to avoid an actual branch. Instead, all instructions are scheduled, but a per-thread condition code or predicate controls which threads execute the instructions. Try to avoid different execution paths within a warp when possible.","global","8.725"
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","570,647.68",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","127,825,080",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","570,844.65",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","127,869,202",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","OPT","This kernel executes 0 fused and 9262557 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","3.457"
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Launch Statistics","Block Size","","1,024",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Launch Statistics","Grid Size","","18,575",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","16",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","32.77",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","Kbyte/block","8.19",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Launch Statistics","# SMs","SM","56",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Launch Statistics","Threads","thread","19,020,800",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Launch Statistics","Uses Green Context","","0",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","165.85",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","4",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","3",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","64",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","100",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","10.26",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","6.57",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Occupancy","","","","AchievedOccupancy","OPT","The difference between calculated theoretical (100.0%) and measured achieved occupancy (10.3%) can be the result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy.","global","85.66"
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","473,463.17",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","165,837,312",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","5,255,128.64",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","296,186,632",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","2,364,605.02",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","245,685,312",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","5,255,128.64",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","296,186,632",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","3,980,513.30",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","1,184,746,528",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.16",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","20,937,404",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","99.34",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","544.13",
"15","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 1546803 excessive sectors (13% of the total 11697942 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","6.109"
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.21",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","929.99",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","5,284,779",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","8.31",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","6.86",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","msecond","5.68",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","8.36",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","6.42",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","5,252,424.57",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","10.80",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","OPT","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons.","",""
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","PM Sampling","Maximum Buffer Size","Mbyte","3.60",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","PM Sampling","Dropped Samples","sample","0",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","PM Sampling","Maximum Sampling Interval","cycle","320,000",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","PM Sampling","# Pass Groups","","4",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.43",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.43",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","10.87",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.43",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","10.87",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","All compute pipelines are under-utilized. Either this kernel is very small or it doesn't issue enough warps per scheduler. Check the Launch Statistics and Scheduler Statistics sections for further details.","local","93.08"
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","63.98",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","8.31",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","8.01",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","7.92",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","31.71",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","8.01",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 26.6 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","1.404"
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","14.34",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.14",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","85.66",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","2.15",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.19",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 7.0 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 2.15 active warps per scheduler, but only an average of 0.19 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, reduce the time the active warps are stalled by inspecting the top stall reasons on the Warp State Statistics and Source Counters sections.","local","85.66"
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","15.01",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","15.01",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","6.66",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","6.13",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 5.0 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory. This stall type represents about 33.6% of the total average of 15.0 cycles between issuing two instructions.","global","33.62"
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","WarpStateStats","","","","ThreadDivergence","OPT","Instructions are executed in warps, which are groups of 32 threads. Optimal instruction throughput is achieved if all 32 threads of a warp execute the same instruction. The chosen launch configuration, early thread completion, and divergent flow control can significantly lower the number of active threads in a warp per cycle. This kernel achieves an average of 6.7 threads being active per cycle. This is further reduced to 6.1 threads per warp due to predication. The compiler may use predication to avoid an actual branch. Instead, all instructions are scheduled, but a per-thread condition code or predicate controls which threads execute the instructions. Try to avoid different execution paths within a warp when possible.","global","8.732"
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","570,647.68",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","127,825,080",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","570,844.51",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","127,869,170",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","OPT","This kernel executes 0 fused and 9262557 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","3.459"
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Launch Statistics","Block Size","","1,024",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Launch Statistics","Grid Size","","18,575",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","16",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","32.77",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","Kbyte/block","8.19",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Launch Statistics","# SMs","SM","56",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Launch Statistics","Threads","thread","19,020,800",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Launch Statistics","Uses Green Context","","0",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","165.85",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","4",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","3",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","64",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","100",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","10.25",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","6.56",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Occupancy","","","","AchievedOccupancy","OPT","The difference between calculated theoretical (100.0%) and measured achieved occupancy (10.3%) can be the result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy.","global","85.66"
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","473,388.33",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","165,702,656",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","5,252,424.57",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","295,947,190",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","2,330,230.19",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","245,486,640",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","5,252,424.57",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","295,947,190",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","3,980,861.50",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","1,183,788,760",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.16",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","20,937,404",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","99.34",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","544.13",
"16","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 1546803 excessive sectors (13% of the total 11697942 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","6.025"
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.21",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","929.99",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","5,381,874",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","8.16",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","6.73",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","msecond","5.79",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","8.21",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","6.29",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","5,349,203.73",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","10.61",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","OPT","This kernel exhibits low compute throughput and memory bandwidth utilization relative to the peak performance of this device. Achieved compute throughput and/or memory bandwidth below 60.0% of peak typically indicate latency issues. Look at Scheduler Statistics and Warp State Statistics for potential reasons.","",""
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","PM Sampling","Maximum Buffer Size","Mbyte","2.10",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","PM Sampling","Dropped Samples","sample","0",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","PM Sampling","Maximum Sampling Interval","cycle","20,000",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","PM Sampling","# Pass Groups","","4",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.43",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.42",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","10.67",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.43",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","10.67",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","All compute pipelines are under-utilized. Either this kernel is very small or it doesn't issue enough warps per scheduler. Check the Launch Statistics and Scheduler Statistics sections for further details.","local","93.21"
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","62.82",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","8.16",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","7.86",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","7.94",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","31.72",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","7.86",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L1TEX might not be optimal. On average, only 26.6 of the 32 bytes transmitted per sector are utilized by each thread. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","1.379"
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","14.36",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.14",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","85.64",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","2.16",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.19",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 7.0 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 2.16 active warps per scheduler, but only an average of 0.19 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, reduce the time the active warps are stalled by inspecting the top stall reasons on the Warp State Statistics and Source Counters sections.","local","85.64"
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","15.03",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","15.04",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","6.66",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","6.13",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 5.0 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory. This stall type represents about 33.5% of the total average of 15.0 cycles between issuing two instructions.","global","33.54"
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","WarpStateStats","","","","ThreadDivergence","OPT","Instructions are executed in warps, which are groups of 32 threads. Optimal instruction throughput is achieved if all 32 threads of a warp execute the same instruction. The chosen launch configuration, early thread completion, and divergent flow control can significantly lower the number of active threads in a warp per cycle. This kernel achieves an average of 6.7 threads being active per cycle. This is further reduced to 6.1 threads per warp due to predication. The compiler may use predication to avoid an actual branch. Instead, all instructions are scheduled, but a per-thread condition code or predicate controls which threads execute the instructions. Try to avoid different execution paths within a warp when possible.","global","8.575"
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","570,647.68",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","127,825,080",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","570,844.66",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","127,869,204",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","OPT","This kernel executes 0 fused and 9262557 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","3.396"
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Launch Statistics","Block Size","","1,024",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Launch Statistics","Grid Size","","18,575",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","16",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","32.77",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","Kbyte/block","8.19",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Launch Statistics","# SMs","SM","56",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Launch Statistics","Threads","thread","19,020,800",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Launch Statistics","Uses Green Context","","0",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","165.85",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","4",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","3",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","64",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","100",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","10.09",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","6.45",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Occupancy","","","","AchievedOccupancy","OPT","The difference between calculated theoretical (100.0%) and measured achieved occupancy (10.1%) can be the result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy.","global","85.64"
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","473,351.50",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","168,747,520",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","5,349,203.73",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","301,384,398",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","2,320,036.29",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","249,996,768",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","5,349,203.73",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","301,384,398",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","3,974,944.92",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","1,205,537,592",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.16",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","20,937,404",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","99.34",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","544.13",
"17","146007","SpMV","127.0.0.1","146007  ""<default domain>:COO SortR mawi_201512012345.mtx:none:none:none:none:none:none"" ","","multiplicationCOO(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(18575, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 1546803 excessive sectors (13% of the total 11697942 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","5.89"
