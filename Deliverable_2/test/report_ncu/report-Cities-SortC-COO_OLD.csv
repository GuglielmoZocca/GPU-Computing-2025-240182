"ID","Process ID","Process Name","Host Name","thread Domain:Push/Pop_Range:PL_Type:PL_Value:CLR_Type:Color:Msg_Type:Msg","Id:Domain:Start/Stop_Range:PL_Type:PL_Value:CLR_Type:Color:Msg_Type:Msg","Kernel Name","Context","Stream","Block Size","Grid Size","Device","CC","Section Name","Metric Name","Metric Unit","Metric Value","Rule Name","Rule Type","Rule Description","Estimated Speedup Type","Estimated Speedup"
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.19",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","919.46",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","4,385",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","0.70",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","0.46",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","4.77",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","0.95",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","0.85",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","1,543.20",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.24",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","OPT","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details.","",""
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","PM Sampling","Maximum Buffer Size","Kbyte","524.29",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","PM Sampling","Dropped Samples","sample","0",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","PM Sampling","Maximum Sampling Interval","cycle","20,000",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","PM Sampling","# Pass Groups","","4",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.02",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.01",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","0.67",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.03",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","0.67",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","All compute pipelines are under-utilized. Either this kernel is very small or it doesn't issue enough warps per scheduler. Check the Launch Statistics and Scheduler Statistics sections for further details.","local","99.73"
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","4.21",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.70",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","0.70",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","0",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","77.06",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.21",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L2 might not be optimal. On average, only 29.9 of the 32 bytes transmitted per sector are utilized by each thread. This applies to the 100.0% of sectors missed in L1TEX. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","0.05555"
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","2.75",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.03",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","97.25",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","1",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.03",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 36.4 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 1.00 active warps per scheduler, but only an average of 0.03 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, reduce the time the active warps are stalled by inspecting the top stall reasons on the Warp State Statistics and Source Counters sections.","local","97.25"
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","36.42",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","40.06",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.52",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","28.02",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 14.1 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory. This stall type represents about 38.8% of the total average of 36.4 cycles between issuing two instructions.","global","38.79"
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 13.4 cycles being stalled waiting for an immediate constant cache (IMC) miss. A read from constant memory costs one memory read from device memory only on a cache miss; otherwise, it just costs one read from the constant cache. Immediate constants are encoded into the SASS instruction as 'c[bank][offset]'. Accesses to different addresses by threads within a warp are serialized, thus the cost scales linearly with the number of unique addresses read by all threads within a warp. As such, the constant cache is best when threads in the same warp access only a few distinct locations. If all threads of a warp access the same location, then constant memory can be as fast as a register access. This stall type represents about 36.7% of the total average of 36.4 cycles between issuing two instructions.","global","36.7"
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","9.38",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","2,100",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","10.31",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","2,310",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","OPT","This kernel executes 0 fused and 42 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","0.1337"
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Launch Statistics","Block Size","","32",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Launch Statistics","Grid Size","","42",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","16",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","65.54",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","256",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Launch Statistics","# SMs","SM","56",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Launch Statistics","Threads","thread","1,344",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Launch Statistics","Uses Green Context","","0",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","OPT","The grid for this launch is configured to execute only 42 blocks, which is less than the GPU's 56 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations.","global","25"
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","128",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","51",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","64",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","1.53",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","0.98",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Occupancy","","","","AchievedOccupancy","OPT","The difference between calculated theoretical (50.0%) and measured achieved occupancy (1.5%) can be the result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy.","global","96.93"
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Occupancy","","","","TheoreticalOccupancy","OPT","The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. This kernel's theoretical occupancy (50.0%) is limited by the number of blocks that can fit on the SM.","global","50"
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","26.17",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","136,704",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","1,543.20",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","245,504",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","643.77",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","203,616",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","1,543.20",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","245,504",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","375.54",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","982,016",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","WorkloadDistribution","","","","WorkloadImbalance","OPT","One or more SMs have a much lower number of active cycles than the average number of active cycles. Maximum instance value is 30.20% above the average, while the minimum instance value is 100.00% below the average.","global","10.63"
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","WorkloadDistribution","","","","WorkloadImbalance","OPT","One or more SMSPs have a much lower number of active cycles than the average number of active cycles. Maximum instance value is 82.52% above the average, while the minimum instance value is 100.00% below the average.","global","7.069"
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","WorkloadDistribution","","","","WorkloadImbalance","OPT","One or more L1 Slices have a much lower number of active cycles than the average number of active cycles. Maximum instance value is 30.20% above the average, while the minimum instance value is 100.00% below the average.","global","10.63"
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","WorkloadDistribution","","","","WorkloadImbalance","OPT","One or more L2 Slices have a much lower number of active cycles than the average number of active cycles. Maximum instance value is 63.83% above the average, while the minimum instance value is 88.04% below the average.","global","9.687"
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.20",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","420",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","33.33",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.38",
"0","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 92 excessive sectors (11% of the total 810 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","1.724"
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.21",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","919.29",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","4,355",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","0.71",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","0.45",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","4.74",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","0.95",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","0.86",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","1,548.66",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.24",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","OPT","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details.","",""
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","PM Sampling","Maximum Buffer Size","Kbyte","524.29",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","PM Sampling","Dropped Samples","sample","0",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","PM Sampling","Maximum Sampling Interval","cycle","20,000",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","PM Sampling","# Pass Groups","","4",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.02",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.01",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","0.67",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.03",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","0.67",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","All compute pipelines are under-utilized. Either this kernel is very small or it doesn't issue enough warps per scheduler. Check the Launch Statistics and Scheduler Statistics sections for further details.","local","99.73"
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","4.22",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.70",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","0.71",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","0",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","75.91",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.21",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L2 might not be optimal. On average, only 29.9 of the 32 bytes transmitted per sector are utilized by each thread. This applies to the 100.0% of sectors missed in L1TEX. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","0.05606"
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","2.82",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.03",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","97.18",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","1",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.03",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 35.4 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 1.00 active warps per scheduler, but only an average of 0.03 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, reduce the time the active warps are stalled by inspecting the top stall reasons on the Warp State Statistics and Source Counters sections.","local","97.18"
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","35.43",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","38.98",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.52",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","28.02",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 14.2 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory. This stall type represents about 40.1% of the total average of 35.4 cycles between issuing two instructions.","global","40.1"
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 13.4 cycles being stalled waiting for an immediate constant cache (IMC) miss. A read from constant memory costs one memory read from device memory only on a cache miss; otherwise, it just costs one read from the constant cache. Immediate constants are encoded into the SASS instruction as 'c[bank][offset]'. Accesses to different addresses by threads within a warp are serialized, thus the cost scales linearly with the number of unique addresses read by all threads within a warp. As such, the constant cache is best when threads in the same warp access only a few distinct locations. If all threads of a warp access the same location, then constant memory can be as fast as a register access. This stall type represents about 37.8% of the total average of 35.4 cycles between issuing two instructions.","global","37.81"
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","9.38",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","2,100",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","10.31",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","2,310",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","OPT","This kernel executes 0 fused and 42 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","0.1332"
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Launch Statistics","Block Size","","32",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Launch Statistics","Grid Size","","42",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","16",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","65.54",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","256",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Launch Statistics","# SMs","SM","56",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Launch Statistics","Threads","thread","1,344",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Launch Statistics","Uses Green Context","","0",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","OPT","The grid for this launch is configured to execute only 42 blocks, which is less than the GPU's 56 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations.","global","25"
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","128",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","51",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","64",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","1.49",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","0.95",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Occupancy","","","","AchievedOccupancy","OPT","The difference between calculated theoretical (50.0%) and measured achieved occupancy (1.5%) can be the result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy.","global","97.02"
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Occupancy","","","","TheoreticalOccupancy","OPT","The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. This kernel's theoretical occupancy (50.0%) is limited by the number of blocks that can fit on the SM.","global","50"
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","26",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","137,216",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","1,548.66",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","243,810",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","664.21",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","202,224",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","1,548.66",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","243,810",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","365.40",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","975,240",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","WorkloadDistribution","","","","WorkloadImbalance","OPT","One or more SMs have a much lower number of active cycles than the average number of active cycles. Maximum instance value is 29.35% above the average, while the minimum instance value is 100.00% below the average.","global","10.44"
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","WorkloadDistribution","","","","WorkloadImbalance","OPT","One or more SMSPs have a much lower number of active cycles than the average number of active cycles. Maximum instance value is 82.36% above the average, while the minimum instance value is 100.00% below the average.","global","6.912"
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","WorkloadDistribution","","","","WorkloadImbalance","OPT","One or more L1 Slices have a much lower number of active cycles than the average number of active cycles. Maximum instance value is 29.35% above the average, while the minimum instance value is 100.00% below the average.","global","10.44"
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","WorkloadDistribution","","","","WorkloadImbalance","OPT","One or more L2 Slices have a much lower number of active cycles than the average number of active cycles. Maximum instance value is 63.00% above the average, while the minimum instance value is 88.41% below the average.","global","9.932"
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.20",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","420",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","33.33",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.38",
"1","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 92 excessive sectors (11% of the total 810 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","1.791"
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.21",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","920.58",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","4,449",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","0.72",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","0.45",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","4.83",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","0.92",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","0.84",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","1,594.45",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.23",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","OPT","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details.","",""
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","PM Sampling","Maximum Buffer Size","Kbyte","524.29",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","PM Sampling","Dropped Samples","sample","0",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","PM Sampling","Maximum Sampling Interval","cycle","20,000",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","PM Sampling","# Pass Groups","","4",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.02",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.01",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","0.65",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.03",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","0.65",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","All compute pipelines are under-utilized. Either this kernel is very small or it doesn't issue enough warps per scheduler. Check the Launch Statistics and Scheduler Statistics sections for further details.","local","99.74"
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","4.13",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.72",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","0.63",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","0",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","75.28",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.20",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L2 might not be optimal. On average, only 29.9 of the 32 bytes transmitted per sector are utilized by each thread. This applies to the 100.0% of sectors missed in L1TEX. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","0.05499"
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","2.82",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.03",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","97.18",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","1",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.03",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 35.4 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 1.00 active warps per scheduler, but only an average of 0.03 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, reduce the time the active warps are stalled by inspecting the top stall reasons on the Warp State Statistics and Source Counters sections.","local","97.18"
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","35.45",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","38.99",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","30.52",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","28.02",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 14.1 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory. This stall type represents about 39.8% of the total average of 35.4 cycles between issuing two instructions.","global","39.81"
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 13.4 cycles being stalled waiting for an immediate constant cache (IMC) miss. A read from constant memory costs one memory read from device memory only on a cache miss; otherwise, it just costs one read from the constant cache. Immediate constants are encoded into the SASS instruction as 'c[bank][offset]'. Accesses to different addresses by threads within a warp are serialized, thus the cost scales linearly with the number of unique addresses read by all threads within a warp. As such, the constant cache is best when threads in the same warp access only a few distinct locations. If all threads of a warp access the same location, then constant memory can be as fast as a register access. This stall type represents about 37.7% of the total average of 35.4 cycles between issuing two instructions.","global","37.72"
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","9.38",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","2,100",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","10.31",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","2,310",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","OPT","This kernel executes 0 fused and 42 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","0.1294"
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Launch Statistics","Block Size","","32",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Launch Statistics","Grid Size","","42",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","16",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","65.54",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","256",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Launch Statistics","# SMs","SM","56",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Launch Statistics","Threads","thread","1,344",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Launch Statistics","Uses Green Context","","0",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","OPT","The grid for this launch is configured to execute only 42 blocks, which is less than the GPU's 56 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations.","global","25"
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","128",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","51",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","64",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","32",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","50",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","1.45",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","0.93",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Occupancy","","","","AchievedOccupancy","OPT","The difference between calculated theoretical (50.0%) and measured achieved occupancy (1.4%) can be the result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy.","global","97.11"
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Occupancy","","","","TheoreticalOccupancy","OPT","The 8.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the hardware maximum of 16. This kernel's theoretical occupancy (50.0%) is limited by the number of blocks that can fit on the SM.","global","50"
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","26",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","139,776",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","1,594.45",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","249,102",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","676.62",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","206,640",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","1,594.45",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","249,102",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","365.56",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","996,408",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","WorkloadDistribution","","","","WorkloadImbalance","OPT","One or more SMs have a much lower number of active cycles than the average number of active cycles. Maximum instance value is 30.01% above the average, while the minimum instance value is 100.00% below the average.","global","10.76"
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","WorkloadDistribution","","","","WorkloadImbalance","OPT","One or more SMSPs have a much lower number of active cycles than the average number of active cycles. Maximum instance value is 82.41% above the average, while the minimum instance value is 100.00% below the average.","global","6.772"
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","WorkloadDistribution","","","","WorkloadImbalance","OPT","One or more L1 Slices have a much lower number of active cycles than the average number of active cycles. Maximum instance value is 30.01% above the average, while the minimum instance value is 100.00% below the average.","global","10.76"
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","WorkloadDistribution","","","","WorkloadImbalance","OPT","One or more L2 Slices have a much lower number of active cycles than the average number of active cycles. Maximum instance value is 63.07% above the average, while the minimum instance value is 88.47% below the average.","global","9.912"
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.20",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","420",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","33.33",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.38",
"2","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 32 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(32, 1, 1)","(42, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 92 excessive sectors (11% of the total 810 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","1.785"
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.20",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","917.27",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","4,434",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","0.60",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","0.45",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","4.83",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","1.66",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","0.66",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","808.54",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.23",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","OPT","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details.","",""
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","PM Sampling","Maximum Buffer Size","Kbyte","524.29",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","PM Sampling","Dropped Samples","sample","0",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","PM Sampling","Maximum Sampling Interval","cycle","20,000",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","PM Sampling","# Pass Groups","","4",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.05",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.01",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","1.25",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.05",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","1.25",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","All compute pipelines are under-utilized. Either this kernel is very small or it doesn't issue enough warps per scheduler. Check the Launch Statistics and Scheduler Statistics sections for further details.","local","99.49"
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","4.16",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.60",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","0.55",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","2.30",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","76.11",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.20",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L2 might not be optimal. On average, only 29.9 of the 32 bytes transmitted per sector are utilized by each thread. This applies to the 96.4% of sectors missed in L1TEX. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","0.04173"
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","2.77",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.03",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","97.23",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","1",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.03",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 36.0 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 1.00 active warps per scheduler, but only an average of 0.03 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, reduce the time the active warps are stalled by inspecting the top stall reasons on the Warp State Statistics and Source Counters sections.","local","97.23"
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","36.05",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","39.73",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","31.22",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","28.65",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 14.5 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory. This stall type represents about 40.2% of the total average of 36.0 cycles between issuing two instructions.","global","40.2"
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 13.9 cycles being stalled waiting for an immediate constant cache (IMC) miss. A read from constant memory costs one memory read from device memory only on a cache miss; otherwise, it just costs one read from the constant cache. Immediate constants are encoded into the SASS instruction as 'c[bank][offset]'. Accesses to different addresses by threads within a warp are serialized, thus the cost scales linearly with the number of unique addresses read by all threads within a warp. As such, the constant cache is best when threads in the same warp access only a few distinct locations. If all threads of a warp access the same location, then constant memory can be as fast as a register access. This stall type represents about 38.5% of the total average of 36.0 cycles between issuing two instructions.","global","38.55"
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","9.19",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","2,058",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","10.12",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","2,268",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","OPT","This kernel executes 0 fused and 42 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","0.2551"
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Launch Statistics","Block Size","","64",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Launch Statistics","Grid Size","","21",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","16",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","65.54",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","512",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Launch Statistics","# SMs","SM","56",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Launch Statistics","Threads","thread","1,344",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Launch Statistics","Uses Green Context","","0",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.01",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","OPT","The grid for this launch is configured to execute only 21 blocks, which is less than the GPU's 56 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations.","global","62.5"
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","64",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","42",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","32",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","64",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","100",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","2.85",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","1.82",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Occupancy","","","","AchievedOccupancy","OPT","The difference between calculated theoretical (100.0%) and measured achieved occupancy (2.8%) can be the result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy.","global","97.15"
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","26.17",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","138,752",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","808.54",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","248,206",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","641.90",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","205,872",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","808.54",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","248,206",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","364.98",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","992,824",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","WorkloadDistribution","","","","WorkloadImbalance","OPT","One or more SMs have a much lower number of active cycles than the average number of active cycles. Maximum instance value is 64.58% above the average, while the minimum instance value is 100.00% below the average.","global","11.78"
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","WorkloadDistribution","","","","WorkloadImbalance","OPT","One or more SMSPs have a much lower number of active cycles than the average number of active cycles. Maximum instance value is 82.26% above the average, while the minimum instance value is 100.00% below the average.","global","6.774"
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","WorkloadDistribution","","","","WorkloadImbalance","OPT","One or more L1 Slices have a much lower number of active cycles than the average number of active cycles. Maximum instance value is 64.58% above the average, while the minimum instance value is 100.00% below the average.","global","11.78"
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","WorkloadDistribution","","","","WorkloadImbalance","OPT","One or more L2 Slices have a much lower number of active cycles than the average number of active cycles. Maximum instance value is 59.83% above the average, while the minimum instance value is 87.85% below the average.","global","8.954"
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.18",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","378",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","66.67",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.19",
"3","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 92 excessive sectors (11% of the total 810 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","1.7"
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.20",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","919.25",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","4,473",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","0.59",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","0.44",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","4.86",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","1.79",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","0.66",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","803.04",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.23",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","OPT","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details.","",""
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","PM Sampling","Maximum Buffer Size","Kbyte","524.29",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","PM Sampling","Dropped Samples","sample","0",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","PM Sampling","Maximum Sampling Interval","cycle","20,000",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","PM Sampling","# Pass Groups","","4",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.05",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.01",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","1.26",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.05",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","1.26",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","All compute pipelines are under-utilized. Either this kernel is very small or it doesn't issue enough warps per scheduler. Check the Launch Statistics and Scheduler Statistics sections for further details.","local","99.49"
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","4.11",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.59",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","0.55",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","2.30",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","74.39",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.20",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L2 might not be optimal. On average, only 29.9 of the 32 bytes transmitted per sector are utilized by each thread. This applies to the 96.4% of sectors missed in L1TEX. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","0.0416"
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","2.73",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.03",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","97.27",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","1",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.03",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 36.6 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 1.00 active warps per scheduler, but only an average of 0.03 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, reduce the time the active warps are stalled by inspecting the top stall reasons on the Warp State Statistics and Source Counters sections.","local","97.27"
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","36.61",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","40.35",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","31.22",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","28.65",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 14.8 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory. This stall type represents about 40.5% of the total average of 36.6 cycles between issuing two instructions.","global","40.53"
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 13.9 cycles being stalled waiting for an immediate constant cache (IMC) miss. A read from constant memory costs one memory read from device memory only on a cache miss; otherwise, it just costs one read from the constant cache. Immediate constants are encoded into the SASS instruction as 'c[bank][offset]'. Accesses to different addresses by threads within a warp are serialized, thus the cost scales linearly with the number of unique addresses read by all threads within a warp. As such, the constant cache is best when threads in the same warp access only a few distinct locations. If all threads of a warp access the same location, then constant memory can be as fast as a register access. This stall type represents about 38.0% of the total average of 36.6 cycles between issuing two instructions.","global","38.02"
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","9.19",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","2,058",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","10.12",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","2,268",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","OPT","This kernel executes 0 fused and 42 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","0.2568"
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Launch Statistics","Block Size","","64",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Launch Statistics","Grid Size","","21",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","16",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","65.54",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","512",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Launch Statistics","# SMs","SM","56",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Launch Statistics","Threads","thread","1,344",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Launch Statistics","Uses Green Context","","0",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.01",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","OPT","The grid for this launch is configured to execute only 21 blocks, which is less than the GPU's 56 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations.","global","62.5"
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","64",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","42",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","32",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","64",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","100",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","2.91",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","1.86",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Occupancy","","","","AchievedOccupancy","OPT","The difference between calculated theoretical (100.0%) and measured achieved occupancy (2.9%) can be the result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy.","global","97.09"
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","26",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","140,288",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","803.04",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","250,390",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","668.94",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","207,696",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","803.04",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","250,390",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","370.71",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","1,001,560",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","WorkloadDistribution","","","","WorkloadImbalance","OPT","One or more SMs have a much lower number of active cycles than the average number of active cycles. Maximum instance value is 65.90% above the average, while the minimum instance value is 100.00% below the average.","global","11.84"
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","WorkloadDistribution","","","","WorkloadImbalance","OPT","One or more SMSPs have a much lower number of active cycles than the average number of active cycles. Maximum instance value is 83.32% above the average, while the minimum instance value is 100.00% below the average.","global","6.908"
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","WorkloadDistribution","","","","WorkloadImbalance","OPT","One or more L1 Slices have a much lower number of active cycles than the average number of active cycles. Maximum instance value is 65.90% above the average, while the minimum instance value is 100.00% below the average.","global","11.84"
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","WorkloadDistribution","","","","WorkloadImbalance","OPT","One or more L2 Slices have a much lower number of active cycles than the average number of active cycles. Maximum instance value is 61.88% above the average, while the minimum instance value is 88.49% below the average.","global","9.567"
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.18",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","378",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","66.67",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.19",
"4","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 92 excessive sectors (11% of the total 810 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","1.756"
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.21",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","923.92",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","4,288",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","0.64",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","0.47",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","4.64",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","1.74",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","0.68",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","771.18",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.24",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","OPT","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details.","",""
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","PM Sampling","Maximum Buffer Size","Kbyte","524.29",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","PM Sampling","Dropped Samples","sample","0",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","PM Sampling","Maximum Sampling Interval","cycle","20,000",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","PM Sampling","# Pass Groups","","4",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.05",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.01",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","1.31",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.05",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","1.31",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","All compute pipelines are under-utilized. Either this kernel is very small or it doesn't issue enough warps per scheduler. Check the Launch Statistics and Scheduler Statistics sections for further details.","local","99.47"
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","4.33",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.61",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","0.64",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","2.30",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","74.39",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.21",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L2 might not be optimal. On average, only 29.9 of the 32 bytes transmitted per sector are utilized by each thread. This applies to the 96.4% of sectors missed in L1TEX. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","0.04301"
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","2.77",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.03",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","97.23",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","1",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.03",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 36.0 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 1.00 active warps per scheduler, but only an average of 0.03 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, reduce the time the active warps are stalled by inspecting the top stall reasons on the Warp State Statistics and Source Counters sections.","local","97.23"
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","36.05",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","39.73",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","31.22",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","28.65",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 15.2 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory. This stall type represents about 42.3% of the total average of 36.0 cycles between issuing two instructions.","global","42.29"
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 13.9 cycles being stalled waiting for an immediate constant cache (IMC) miss. A read from constant memory costs one memory read from device memory only on a cache miss; otherwise, it just costs one read from the constant cache. Immediate constants are encoded into the SASS instruction as 'c[bank][offset]'. Accesses to different addresses by threads within a warp are serialized, thus the cost scales linearly with the number of unique addresses read by all threads within a warp. As such, the constant cache is best when threads in the same warp access only a few distinct locations. If all threads of a warp access the same location, then constant memory can be as fast as a register access. This stall type represents about 38.6% of the total average of 36.0 cycles between issuing two instructions.","global","38.64"
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","9.19",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","2,058",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","10.12",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","2,268",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","OPT","This kernel executes 0 fused and 42 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","0.2674"
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Launch Statistics","Block Size","","64",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Launch Statistics","Grid Size","","21",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","16",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","65.54",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","byte/block","512",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Launch Statistics","# SMs","SM","56",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Launch Statistics","Threads","thread","1,344",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Launch Statistics","Uses Green Context","","0",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.01",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","OPT","The grid for this launch is configured to execute only 21 blocks, which is less than the GPU's 56 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations.","global","62.5"
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","64",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","42",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","32",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","64",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","100",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","2.99",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","1.91",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Occupancy","","","","AchievedOccupancy","OPT","The difference between calculated theoretical (100.0%) and measured achieved occupancy (3.0%) can be the result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy.","global","97.01"
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","26.17",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","134,400",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","771.18",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","240,072",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","641.88",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","199,152",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","771.18",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","240,072",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","365.00",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","960,288",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","WorkloadDistribution","","","","WorkloadImbalance","OPT","One or more SMs have a much lower number of active cycles than the average number of active cycles. Maximum instance value is 64.28% above the average, while the minimum instance value is 100.00% below the average.","global","11.56"
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","WorkloadDistribution","","","","WorkloadImbalance","OPT","One or more SMSPs have a much lower number of active cycles than the average number of active cycles. Maximum instance value is 82.24% above the average, while the minimum instance value is 100.00% below the average.","global","7.002"
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","WorkloadDistribution","","","","WorkloadImbalance","OPT","One or more L1 Slices have a much lower number of active cycles than the average number of active cycles. Maximum instance value is 64.28% above the average, while the minimum instance value is 100.00% below the average.","global","11.56"
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","WorkloadDistribution","","","","WorkloadImbalance","OPT","One or more L2 Slices have a much lower number of active cycles than the average number of active cycles. Maximum instance value is 64.40% above the average, while the minimum instance value is 87.85% below the average.","global","9.963"
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.18",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","378",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","66.67",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.19",
"5","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 64 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(64, 1, 1)","(21, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 92 excessive sectors (11% of the total 810 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","1.757"
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.20",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","916.46",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","4,488",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","0.61",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","0.45",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","4.90",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","3.08",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","0.61",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","436.50",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.23",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","OPT","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details.","",""
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","PM Sampling","Maximum Buffer Size","Kbyte","524.29",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","PM Sampling","Dropped Samples","sample","0",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","PM Sampling","Maximum Sampling Interval","cycle","20,000",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","PM Sampling","# Pass Groups","","4",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.08",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.01",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","2.32",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.09",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","2.32",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","All compute pipelines are under-utilized. Either this kernel is very small or it doesn't issue enough warps per scheduler. Check the Launch Statistics and Scheduler Statistics sections for further details.","local","99.05"
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","4.10",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.55",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","0.61",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","3.45",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","78.87",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.20",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L2 might not be optimal. On average, only 29.9 of the 32 bytes transmitted per sector are utilized by each thread. This applies to the 94.5% of sectors missed in L1TEX. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","0.03806"
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","2.65",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.03",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","97.35",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","1",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.03",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 37.7 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 1.00 active warps per scheduler, but only an average of 0.03 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, reduce the time the active warps are stalled by inspecting the top stall reasons on the Warp State Statistics and Source Counters sections.","local","97.35"
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","37.72",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","41.70",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","31.57",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","28.97",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 15.1 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory. This stall type represents about 40.0% of the total average of 37.7 cycles between issuing two instructions.","global","40.03"
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 14.9 cycles being stalled waiting for an immediate constant cache (IMC) miss. A read from constant memory costs one memory read from device memory only on a cache miss; otherwise, it just costs one read from the constant cache. Immediate constants are encoded into the SASS instruction as 'c[bank][offset]'. Accesses to different addresses by threads within a warp are serialized, thus the cost scales linearly with the number of unique addresses read by all threads within a warp. As such, the constant cache is best when threads in the same warp access only a few distinct locations. If all threads of a warp access the same location, then constant memory can be as fast as a register access. This stall type represents about 39.5% of the total average of 37.7 cycles between issuing two instructions.","global","39.47"
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","9.15",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","2,050",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","10.12",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","2,266",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","OPT","This kernel executes 0 fused and 42 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","0.4766"
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Launch Statistics","Block Size","","128",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Launch Statistics","Grid Size","","11",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","16",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","65.54",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","Kbyte/block","1.02",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Launch Statistics","# SMs","SM","56",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Launch Statistics","Threads","thread","1,408",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Launch Statistics","Uses Green Context","","0",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.01",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","OPT","The grid for this launch is configured to execute only 11 blocks, which is less than the GPU's 56 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations.","global","80.36"
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","32",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","32",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","16",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","64",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","100",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","5.52",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","3.53",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Occupancy","","","","AchievedOccupancy","OPT","The difference between calculated theoretical (100.0%) and measured achieved occupancy (5.5%) can be the result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy.","global","94.48"
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","26.17",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","140,800",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","436.50",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","251,272",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","588.75",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","208,464",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","436.50",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","251,272",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","381.61",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","1,005,088",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","WorkloadDistribution","","","","WorkloadImbalance","OPT","One or more SMs have a much lower number of active cycles than the average number of active cycles. Maximum instance value is 81.77% above the average, while the minimum instance value is 100.00% below the average.","global","7.954"
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","WorkloadDistribution","","","","WorkloadImbalance","OPT","One or more SMSPs have a much lower number of active cycles than the average number of active cycles. Maximum instance value is 82.82% above the average, while the minimum instance value is 100.00% below the average.","global","7.043"
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","WorkloadDistribution","","","","WorkloadImbalance","OPT","One or more L1 Slices have a much lower number of active cycles than the average number of active cycles. Maximum instance value is 81.77% above the average, while the minimum instance value is 100.00% below the average.","global","7.954"
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","WorkloadDistribution","","","","WorkloadImbalance","OPT","One or more L2 Slices have a much lower number of active cycles than the average number of active cycles. Maximum instance value is 69.09% above the average, while the minimum instance value is 86.75% below the average.","global","9.367"
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.18",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","360",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","82.54",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.10",
"6","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 92 excessive sectors (11% of the total 810 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","1.54"
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.20",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","918.74",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","4,469",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","0.62",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","0.45",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","4.86",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","3.26",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","0.62",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","412.30",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.23",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","OPT","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details.","",""
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","PM Sampling","Maximum Buffer Size","Kbyte","524.29",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","PM Sampling","Dropped Samples","sample","0",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","PM Sampling","Maximum Sampling Interval","cycle","20,000",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","PM Sampling","# Pass Groups","","4",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.09",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.01",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","2.45",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.10",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","2.45",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","All compute pipelines are under-utilized. Either this kernel is very small or it doesn't issue enough warps per scheduler. Check the Launch Statistics and Scheduler Statistics sections for further details.","local","98.99"
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","4.13",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.55",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","0.62",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","3.45",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","78.17",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.20",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L2 might not be optimal. On average, only 29.9 of the 32 bytes transmitted per sector are utilized by each thread. This applies to the 94.5% of sectors missed in L1TEX. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","0.03814"
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","2.58",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.03",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","97.42",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","1",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.03",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 38.8 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 1.00 active warps per scheduler, but only an average of 0.03 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, reduce the time the active warps are stalled by inspecting the top stall reasons on the Warp State Statistics and Source Counters sections.","local","97.42"
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","38.81",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","42.90",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","31.57",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","28.97",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 14.9 cycles being stalled waiting for an immediate constant cache (IMC) miss. A read from constant memory costs one memory read from device memory only on a cache miss; otherwise, it just costs one read from the constant cache. Immediate constants are encoded into the SASS instruction as 'c[bank][offset]'. Accesses to different addresses by threads within a warp are serialized, thus the cost scales linearly with the number of unique addresses read by all threads within a warp. As such, the constant cache is best when threads in the same warp access only a few distinct locations. If all threads of a warp access the same location, then constant memory can be as fast as a register access. This stall type represents about 38.4% of the total average of 38.8 cycles between issuing two instructions.","global","38.37"
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 14.4 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory. This stall type represents about 37.1% of the total average of 38.8 cycles between issuing two instructions.","global","37.14"
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","9.15",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","2,050",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","10.12",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","2,266",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","OPT","This kernel executes 0 fused and 42 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","0.5046"
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Launch Statistics","Block Size","","128",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Launch Statistics","Grid Size","","11",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","16",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","65.54",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","Kbyte/block","1.02",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Launch Statistics","# SMs","SM","56",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Launch Statistics","Threads","thread","1,408",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Launch Statistics","Uses Green Context","","0",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.01",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","OPT","The grid for this launch is configured to execute only 11 blocks, which is less than the GPU's 56 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations.","global","80.36"
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","32",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","32",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","16",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","64",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","100",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","6.01",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","3.85",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Occupancy","","","","AchievedOccupancy","OPT","The difference between calculated theoretical (100.0%) and measured achieved occupancy (6.0%) can be the result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy.","global","93.99"
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","26.17",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","139,776",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","412.30",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","250,250",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","611.94",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","207,552",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","412.30",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","250,250",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","392.65",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","1,001,000",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","WorkloadDistribution","","","","WorkloadImbalance","OPT","One or more SMs have a much lower number of active cycles than the average number of active cycles. Maximum instance value is 82.60% above the average, while the minimum instance value is 100.00% below the average.","global","7.621"
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","WorkloadDistribution","","","","WorkloadImbalance","OPT","One or more SMSPs have a much lower number of active cycles than the average number of active cycles. Maximum instance value is 82.51% above the average, while the minimum instance value is 100.00% below the average.","global","7.25"
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","WorkloadDistribution","","","","WorkloadImbalance","OPT","One or more L1 Slices have a much lower number of active cycles than the average number of active cycles. Maximum instance value is 82.60% above the average, while the minimum instance value is 100.00% below the average.","global","7.621"
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","WorkloadDistribution","","","","WorkloadImbalance","OPT","One or more L2 Slices have a much lower number of active cycles than the average number of active cycles. Maximum instance value is 68.76% above the average, while the minimum instance value is 87.25% below the average.","global","9.731"
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.18",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","360",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","82.54",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.10",
"7","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 92 excessive sectors (11% of the total 810 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","1.607"
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.20",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","918.39",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","4,409",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","0.62",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","0.45",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","4.80",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","3.18",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","0.62",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","422.27",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.23",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","OPT","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details.","",""
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","PM Sampling","Maximum Buffer Size","Kbyte","524.29",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","PM Sampling","Dropped Samples","sample","0",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","PM Sampling","Maximum Sampling Interval","cycle","20,000",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","PM Sampling","# Pass Groups","","4",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.09",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.01",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","2.40",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.10",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","2.40",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","All compute pipelines are under-utilized. Either this kernel is very small or it doesn't issue enough warps per scheduler. Check the Launch Statistics and Scheduler Statistics sections for further details.","local","99.01"
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","4.19",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.59",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","0.62",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","3.45",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","78.90",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.20",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L2 might not be optimal. On average, only 29.9 of the 32 bytes transmitted per sector are utilized by each thread. This applies to the 94.5% of sectors missed in L1TEX. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","0.03867"
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","2.61",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.03",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","97.39",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","1",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.03",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 38.2 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 1.00 active warps per scheduler, but only an average of 0.03 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, reduce the time the active warps are stalled by inspecting the top stall reasons on the Warp State Statistics and Source Counters sections.","local","97.39"
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","38.25",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","42.28",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","31.57",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","28.97",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 16.2 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory. This stall type represents about 42.4% of the total average of 38.2 cycles between issuing two instructions.","global","42.38"
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 14.9 cycles being stalled waiting for an immediate constant cache (IMC) miss. A read from constant memory costs one memory read from device memory only on a cache miss; otherwise, it just costs one read from the constant cache. Immediate constants are encoded into the SASS instruction as 'c[bank][offset]'. Accesses to different addresses by threads within a warp are serialized, thus the cost scales linearly with the number of unique addresses read by all threads within a warp. As such, the constant cache is best when threads in the same warp access only a few distinct locations. If all threads of a warp access the same location, then constant memory can be as fast as a register access. This stall type represents about 38.9% of the total average of 38.2 cycles between issuing two instructions.","global","38.94"
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","9.15",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","2,050",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","10.12",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","2,266",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","OPT","This kernel executes 0 fused and 42 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","0.4927"
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Launch Statistics","Block Size","","128",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Launch Statistics","Grid Size","","11",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","16",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","65.54",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","Kbyte/block","1.02",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Launch Statistics","# SMs","SM","56",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Launch Statistics","Threads","thread","1,408",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Launch Statistics","Uses Green Context","","0",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.01",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","OPT","The grid for this launch is configured to execute only 11 blocks, which is less than the GPU's 56 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations.","global","80.36"
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","32",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","32",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","16",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","64",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","100",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","5.78",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","3.70",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Occupancy","","","","AchievedOccupancy","OPT","The difference between calculated theoretical (100.0%) and measured achieved occupancy (5.8%) can be the result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy.","global","94.22"
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","26.17",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","138,240",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","422.27",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","246,862",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","598.94",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","204,816",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","422.27",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","246,862",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","386.93",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","987,448",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","WorkloadDistribution","","","","WorkloadImbalance","OPT","One or more SMs have a much lower number of active cycles than the average number of active cycles. Maximum instance value is 81.88% above the average, while the minimum instance value is 100.00% below the average.","global","7.843"
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","WorkloadDistribution","","","","WorkloadImbalance","OPT","One or more SMSPs have a much lower number of active cycles than the average number of active cycles. Maximum instance value is 82.61% above the average, while the minimum instance value is 100.00% below the average.","global","7.251"
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","WorkloadDistribution","","","","WorkloadImbalance","OPT","One or more L1 Slices have a much lower number of active cycles than the average number of active cycles. Maximum instance value is 81.88% above the average, while the minimum instance value is 100.00% below the average.","global","7.843"
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","WorkloadDistribution","","","","WorkloadImbalance","OPT","One or more L2 Slices have a much lower number of active cycles than the average number of active cycles. Maximum instance value is 69.25% above the average, while the minimum instance value is 86.98% below the average.","global","9.721"
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.18",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","360",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","82.54",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.10",
"8","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 128 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(128, 1, 1)","(11, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 92 excessive sectors (11% of the total 810 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","1.594"
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.20",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","919.75",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","4,327",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","0.60",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","0.46",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","4.70",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","5.62",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","0.60",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","236.41",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.24",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","OPT","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details.","",""
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","PM Sampling","Maximum Buffer Size","Kbyte","524.29",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","PM Sampling","Dropped Samples","sample","0",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","PM Sampling","Maximum Sampling Interval","cycle","20,000",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","PM Sampling","# Pass Groups","","4",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.16",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.01",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","4.33",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.17",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","4.33",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","All compute pipelines are under-utilized. Either this kernel is very small or it doesn't issue enough warps per scheduler. Check the Launch Statistics and Scheduler Statistics sections for further details.","local","98.21"
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","4.24",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.57",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","0.60",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","4.03",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","72.28",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.21",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L2 might not be optimal. On average, only 29.9 of the 32 bytes transmitted per sector are utilized by each thread. This applies to the 93.6% of sectors missed in L1TEX. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","0.03666"
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","4.77",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.05",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","95.23",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","1.93",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.05",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 21.0 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 1.93 active warps per scheduler, but only an average of 0.05 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, reduce the time the active warps are stalled by inspecting the top stall reasons on the Warp State Statistics and Source Counters sections.","local","95.23"
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","40.50",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","44.97",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","31.75",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","29.16",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 16.2 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory. This stall type represents about 40.0% of the total average of 40.5 cycles between issuing two instructions.","global","39.95"
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 15.5 cycles being stalled waiting for an immediate constant cache (IMC) miss. A read from constant memory costs one memory read from device memory only on a cache miss; otherwise, it just costs one read from the constant cache. Immediate constants are encoded into the SASS instruction as 'c[bank][offset]'. Accesses to different addresses by threads within a warp are serialized, thus the cost scales linearly with the number of unique addresses read by all threads within a warp. As such, the constant cache is best when threads in the same warp access only a few distinct locations. If all threads of a warp access the same location, then constant memory can be as fast as a register access. This stall type represents about 38.4% of the total average of 40.5 cycles between issuing two instructions.","global","38.36"
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","9.21",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","2,064",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","10.23",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","2,292",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","OPT","This kernel executes 0 fused and 42 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","0.8951"
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Launch Statistics","Block Size","","256",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Launch Statistics","Grid Size","","6",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","16",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","65.54",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","Kbyte/block","2.05",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Launch Statistics","# SMs","SM","56",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Launch Statistics","Threads","thread","1,536",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Launch Statistics","Uses Green Context","","0",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.01",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","OPT","The grid for this launch is configured to execute only 6 blocks, which is less than the GPU's 56 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations.","global","89.29"
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","16",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","21",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","8",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","64",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","100",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","11.06",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","7.08",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Occupancy","","","","AchievedOccupancy","OPT","The difference between calculated theoretical (100.0%) and measured achieved occupancy (11.1%) can be the result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy.","global","88.94"
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","26",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","135,680",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","236.41",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","242,284",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","560.60",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","200,928",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","236.41",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","242,284",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","214.37",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","969,136",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","WorkloadDistribution","","","","WorkloadImbalance","OPT","One or more L2 Slices have a much lower number of active cycles than the average number of active cycles. Maximum instance value is 68.22% above the average, while the minimum instance value is 86.09% below the average.","global","9.136"
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.17",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","354",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","90.48",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.05",
"9","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 92 excessive sectors (11% of the total 810 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","1.521"
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.20",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","916.14",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","4,311",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","0.64",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","0.46",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","4.70",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","6.05",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","0.64",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","236.05",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.24",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","OPT","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details.","",""
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","PM Sampling","Maximum Buffer Size","Kbyte","524.29",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","PM Sampling","Dropped Samples","sample","0",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","PM Sampling","Maximum Sampling Interval","cycle","20,000",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","PM Sampling","# Pass Groups","","4",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.16",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.01",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","4.33",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.17",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","4.33",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","All compute pipelines are under-utilized. Either this kernel is very small or it doesn't issue enough warps per scheduler. Check the Launch Statistics and Scheduler Statistics sections for further details.","local","98.21"
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","4.27",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.57",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","0.64",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","4.03",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","75.82",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.21",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L2 might not be optimal. On average, only 29.9 of the 32 bytes transmitted per sector are utilized by each thread. This applies to the 93.6% of sectors missed in L1TEX. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","0.039"
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","4.56",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.05",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","95.44",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","1.93",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.05",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 21.9 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 1.93 active warps per scheduler, but only an average of 0.05 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, reduce the time the active warps are stalled by inspecting the top stall reasons on the Warp State Statistics and Source Counters sections.","local","95.44"
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","42.41",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","47.09",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","31.75",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","29.16",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 16.2 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory. This stall type represents about 38.2% of the total average of 42.4 cycles between issuing two instructions.","global","38.23"
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 15.5 cycles being stalled waiting for an immediate constant cache (IMC) miss. A read from constant memory costs one memory read from device memory only on a cache miss; otherwise, it just costs one read from the constant cache. Immediate constants are encoded into the SASS instruction as 'c[bank][offset]'. Accesses to different addresses by threads within a warp are serialized, thus the cost scales linearly with the number of unique addresses read by all threads within a warp. As such, the constant cache is best when threads in the same warp access only a few distinct locations. If all threads of a warp access the same location, then constant memory can be as fast as a register access. This stall type represents about 36.6% of the total average of 42.4 cycles between issuing two instructions.","global","36.56"
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","9.21",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","2,064",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","10.23",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","2,292",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","OPT","This kernel executes 0 fused and 42 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","0.8964"
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Launch Statistics","Block Size","","256",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Launch Statistics","Grid Size","","6",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","16",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","65.54",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","Kbyte/block","2.05",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Launch Statistics","# SMs","SM","56",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Launch Statistics","Threads","thread","1,536",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Launch Statistics","Uses Green Context","","0",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.01",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","OPT","The grid for this launch is configured to execute only 6 blocks, which is less than the GPU's 56 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations.","global","89.29"
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","16",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","21",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","8",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","64",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","100",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","11.60",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","7.42",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Occupancy","","","","AchievedOccupancy","OPT","The difference between calculated theoretical (100.0%) and measured achieved occupancy (11.6%) can be the result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy.","global","88.4"
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","26.17",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","135,168",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","236.05",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","241,332",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","577.19",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","200,208",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","236.05",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","241,332",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","224.53",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","965,328",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","WorkloadDistribution","","","","WorkloadImbalance","OPT","One or more L2 Slices have a much lower number of active cycles than the average number of active cycles. Maximum instance value is 67.22% above the average, while the minimum instance value is 86.49% below the average.","global","9.303"
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.17",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","354",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","90.48",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.05",
"10","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 92 excessive sectors (11% of the total 810 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","1.572"
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.20",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","918.47",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","4,322",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","0.57",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","0.46",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","4.70",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","5.63",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","0.60",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","235.93",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.24",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","OPT","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details.","",""
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","PM Sampling","Maximum Buffer Size","Kbyte","524.29",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","PM Sampling","Dropped Samples","sample","0",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","PM Sampling","Maximum Sampling Interval","cycle","20,000",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","PM Sampling","# Pass Groups","","4",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.16",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.01",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","4.34",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.17",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","4.34",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","All compute pipelines are under-utilized. Either this kernel is very small or it doesn't issue enough warps per scheduler. Check the Launch Statistics and Scheduler Statistics sections for further details.","local","98.21"
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","4.24",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.57",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","0.57",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","4.03",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","72.04",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.21",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L2 might not be optimal. On average, only 29.9 of the 32 bytes transmitted per sector are utilized by each thread. This applies to the 93.6% of sectors missed in L1TEX. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","0.03658"
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","4.68",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.05",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","95.32",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","1.93",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.05",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 21.3 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 1.93 active warps per scheduler, but only an average of 0.05 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, reduce the time the active warps are stalled by inspecting the top stall reasons on the Warp State Statistics and Source Counters sections.","local","95.32"
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","41.26",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","45.82",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","31.75",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","29.16",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 18.5 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory. This stall type represents about 44.7% of the total average of 41.3 cycles between issuing two instructions.","global","44.73"
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 15.5 cycles being stalled waiting for an immediate constant cache (IMC) miss. A read from constant memory costs one memory read from device memory only on a cache miss; otherwise, it just costs one read from the constant cache. Immediate constants are encoded into the SASS instruction as 'c[bank][offset]'. Accesses to different addresses by threads within a warp are serialized, thus the cost scales linearly with the number of unique addresses read by all threads within a warp. As such, the constant cache is best when threads in the same warp access only a few distinct locations. If all threads of a warp access the same location, then constant memory can be as fast as a register access. This stall type represents about 37.5% of the total average of 41.3 cycles between issuing two instructions.","global","37.49"
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","9.21",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","2,064",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","10.23",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","2,292",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","OPT","This kernel executes 0 fused and 42 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","0.8969"
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Launch Statistics","Block Size","","256",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Launch Statistics","Grid Size","","6",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","16",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","65.54",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","Kbyte/block","2.05",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Launch Statistics","# SMs","SM","56",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Launch Statistics","Threads","thread","1,536",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Launch Statistics","Uses Green Context","","0",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.01",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","OPT","The grid for this launch is configured to execute only 6 blocks, which is less than the GPU's 56 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations.","global","89.29"
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","16",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","21",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","8",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","64",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","100",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","11.29",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","7.23",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Occupancy","","","","AchievedOccupancy","OPT","The difference between calculated theoretical (100.0%) and measured achieved occupancy (11.3%) can be the result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy.","global","88.71"
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","26",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","135,296",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","235.93",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","241,948",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","561.02",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","200,736",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","235.93",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","241,948",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","218.43",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","967,792",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","WorkloadDistribution","","","","WorkloadImbalance","OPT","One or more L2 Slices have a much lower number of active cycles than the average number of active cycles. Maximum instance value is 65.90% above the average, while the minimum instance value is 86.28% below the average.","global","8.84"
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.17",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","354",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","90.48",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.05",
"11","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 256 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(256, 1, 1)","(6, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 92 excessive sectors (11% of the total 810 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","1.524"
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.19",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","916.75",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","4,430",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","0.59",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","0.45",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","4.83",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","10.77",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","0.68",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","121.66",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.23",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","OPT","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details.","",""
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","PM Sampling","Maximum Buffer Size","Kbyte","524.29",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","PM Sampling","Dropped Samples","sample","0",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","PM Sampling","Maximum Sampling Interval","cycle","20,000",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","PM Sampling","# Pass Groups","","4",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.30",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.01",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","8.39",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.34",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","8.39",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","All compute pipelines are under-utilized. Either this kernel is very small or it doesn't issue enough warps per scheduler. Check the Launch Statistics and Scheduler Statistics sections for further details.","local","96.52"
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","4.16",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.59",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","0.54",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","4.37",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","74.24",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.21",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L2 might not be optimal. On average, only 29.9 of the 32 bytes transmitted per sector are utilized by each thread. This applies to the 93.1% of sectors missed in L1TEX. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","0.04129"
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","8.80",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.09",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","91.20",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","3.61",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.12",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 11.4 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 3.61 active warps per scheduler, but only an average of 0.12 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, reduce the time the active warps are stalled by inspecting the top stall reasons on the Warp State Statistics and Source Counters sections.","local","91.2"
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","41.03",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","45.58",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","31.85",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","29.25",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 15.9 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory. This stall type represents about 38.8% of the total average of 41.0 cycles between issuing two instructions.","global","38.82"
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 15.4 cycles being stalled waiting for an immediate constant cache (IMC) miss. A read from constant memory costs one memory read from device memory only on a cache miss; otherwise, it just costs one read from the constant cache. Immediate constants are encoded into the SASS instruction as 'c[bank][offset]'. Accesses to different addresses by threads within a warp are serialized, thus the cost scales linearly with the number of unique addresses read by all threads within a warp. As such, the constant cache is best when threads in the same warp access only a few distinct locations. If all threads of a warp access the same location, then constant memory can be as fast as a register access. This stall type represents about 37.6% of the total average of 41.0 cycles between issuing two instructions.","global","37.62"
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","9.19",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","2,058",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","10.21",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","2,286",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","OPT","This kernel executes 0 fused and 42 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","1.739"
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Launch Statistics","Block Size","","512",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Launch Statistics","Grid Size","","3",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","16",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","65.54",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","Kbyte/block","4.10",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Launch Statistics","# SMs","SM","56",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Launch Statistics","Threads","thread","1,536",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Launch Statistics","Uses Green Context","","0",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.01",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","OPT","The grid for this launch is configured to execute only 3 blocks, which is less than the GPU's 56 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations.","global","94.64"
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","8",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","12",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","4",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","64",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","100",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","21.72",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","13.90",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Occupancy","","","","AchievedOccupancy","OPT","The difference between calculated theoretical (100.0%) and measured achieved occupancy (21.7%) can be the result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy.","global","78.28"
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","26.17",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","138,240",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","121.66",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","248,066",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","562.33",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","205,728",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","121.66",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","248,066",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","115.93",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","992,264",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","WorkloadDistribution","","","","WorkloadImbalance","OPT","One or more L2 Slices have a much lower number of active cycles than the average number of active cycles. Maximum instance value is 70.92% above the average, while the minimum instance value is 86.13% below the average.","global","9.305"
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.17",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","348",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","95.24",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.03",
"12","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 92 excessive sectors (11% of the total 810 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","1.49"
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.20",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","919.85",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","4,534",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","0.58",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","0.44",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","4.93",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","10.42",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","0.66",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","125.84",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.23",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","OPT","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details.","",""
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","PM Sampling","Maximum Buffer Size","Kbyte","524.29",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","PM Sampling","Dropped Samples","sample","0",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","PM Sampling","Maximum Sampling Interval","cycle","20,000",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","PM Sampling","# Pass Groups","","4",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.29",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.01",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","8.11",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.32",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","8.11",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","All compute pipelines are under-utilized. Either this kernel is very small or it doesn't issue enough warps per scheduler. Check the Launch Statistics and Scheduler Statistics sections for further details.","local","96.64"
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","4.05",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.58",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","0.53",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","4.37",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","75.54",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.20",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L2 might not be optimal. On average, only 29.9 of the 32 bytes transmitted per sector are utilized by each thread. This applies to the 93.1% of sectors missed in L1TEX. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","0.04021"
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","8.31",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.08",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","91.69",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","3.64",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.11",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 12.0 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 3.64 active warps per scheduler, but only an average of 0.11 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, reduce the time the active warps are stalled by inspecting the top stall reasons on the Warp State Statistics and Source Counters sections.","local","91.69"
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","43.76",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","48.60",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","31.85",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","29.25",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 16.0 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory. This stall type represents about 36.5% of the total average of 43.8 cycles between issuing two instructions.","global","36.48"
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 15.5 cycles being stalled waiting for an immediate constant cache (IMC) miss. A read from constant memory costs one memory read from device memory only on a cache miss; otherwise, it just costs one read from the constant cache. Immediate constants are encoded into the SASS instruction as 'c[bank][offset]'. Accesses to different addresses by threads within a warp are serialized, thus the cost scales linearly with the number of unique addresses read by all threads within a warp. As such, the constant cache is best when threads in the same warp access only a few distinct locations. If all threads of a warp access the same location, then constant memory can be as fast as a register access. This stall type represents about 35.3% of the total average of 43.8 cycles between issuing two instructions.","global","35.34"
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","9.19",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","2,058",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","10.21",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","2,286",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","OPT","This kernel executes 0 fused and 42 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","1.682"
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Launch Statistics","Block Size","","512",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Launch Statistics","Grid Size","","3",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","16",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","65.54",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","Kbyte/block","4.10",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Launch Statistics","# SMs","SM","56",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Launch Statistics","Threads","thread","1,536",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Launch Statistics","Uses Green Context","","0",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.01",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","OPT","The grid for this launch is configured to execute only 3 blocks, which is less than the GPU's 56 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations.","global","94.64"
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","8",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","12",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","4",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","64",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","100",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","22.38",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","14.32",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Occupancy","","","","AchievedOccupancy","OPT","The difference between calculated theoretical (100.0%) and measured achieved occupancy (22.4%) can be the result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy.","global","77.62"
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","26",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","142,336",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","125.84",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","253,848",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","583.52",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","210,624",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","125.84",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","253,848",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","122.83",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","1,015,392",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","WorkloadDistribution","","","","WorkloadImbalance","OPT","One or more L2 Slices have a much lower number of active cycles than the average number of active cycles. Maximum instance value is 70.26% above the average, while the minimum instance value is 86.63% below the average.","global","9.343"
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.17",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","348",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","95.24",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.03",
"13","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 92 excessive sectors (11% of the total 810 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","1.51"
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.19",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","917.74",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","4,435",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","0.60",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","0.45",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","4.83",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","10.80",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","0.68",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","121.32",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.23",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","OPT","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details.","",""
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","PM Sampling","Maximum Buffer Size","Kbyte","524.29",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","PM Sampling","Dropped Samples","sample","0",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","PM Sampling","Maximum Sampling Interval","cycle","20,000",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","PM Sampling","# Pass Groups","","4",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.30",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.01",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","8.41",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.34",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","8.41",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","All compute pipelines are under-utilized. Either this kernel is very small or it doesn't issue enough warps per scheduler. Check the Launch Statistics and Scheduler Statistics sections for further details.","local","96.51"
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","4.16",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.57",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","0.60",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","4.37",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","73.57",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.21",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L2 might not be optimal. On average, only 29.9 of the 32 bytes transmitted per sector are utilized by each thread. This applies to the 93.1% of sectors missed in L1TEX. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","0.04124"
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","8.82",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.09",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","91.18",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","3.61",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.12",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 11.3 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 3.61 active warps per scheduler, but only an average of 0.12 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, reduce the time the active warps are stalled by inspecting the top stall reasons on the Warp State Statistics and Source Counters sections.","local","91.18"
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","40.93",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","45.47",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","31.85",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","29.25",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 15.9 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory. This stall type represents about 38.8% of the total average of 40.9 cycles between issuing two instructions.","global","38.83"
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 15.5 cycles being stalled waiting for an immediate constant cache (IMC) miss. A read from constant memory costs one memory read from device memory only on a cache miss; otherwise, it just costs one read from the constant cache. Immediate constants are encoded into the SASS instruction as 'c[bank][offset]'. Accesses to different addresses by threads within a warp are serialized, thus the cost scales linearly with the number of unique addresses read by all threads within a warp. As such, the constant cache is best when threads in the same warp access only a few distinct locations. If all threads of a warp access the same location, then constant memory can be as fast as a register access. This stall type represents about 37.8% of the total average of 40.9 cycles between issuing two instructions.","global","37.84"
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","9.19",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","2,058",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","10.21",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","2,286",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","OPT","This kernel executes 0 fused and 42 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","1.744"
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Launch Statistics","Block Size","","512",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Launch Statistics","Grid Size","","3",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","16",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","65.54",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","Kbyte/block","4.10",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Launch Statistics","# SMs","SM","56",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Launch Statistics","Threads","thread","1,536",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Launch Statistics","Uses Green Context","","0",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.01",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","OPT","The grid for this launch is configured to execute only 3 blocks, which is less than the GPU's 56 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations.","global","94.64"
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","8",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","12",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","4",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","64",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","100",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","21.73",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","13.91",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Occupancy","","","","AchievedOccupancy","OPT","The difference between calculated theoretical (100.0%) and measured achieved occupancy (21.7%) can be the result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy.","global","78.27"
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","26.17",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","138,240",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","121.32",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","248,332",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","557.12",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","205,968",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","121.32",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","248,332",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","115.65",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","993,328",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","WorkloadDistribution","","","","WorkloadImbalance","OPT","One or more L2 Slices have a much lower number of active cycles than the average number of active cycles. Maximum instance value is 70.86% above the average, while the minimum instance value is 86.00% below the average.","global","9.2"
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.17",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","348",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","95.24",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.03",
"14","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 512 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(512, 1, 1)","(3, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 92 excessive sectors (11% of the total 810 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","1.475"
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.20",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","919.99",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","4,505",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","0.59",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","0.44",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","4.90",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","14.71",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","0.59",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","88.64",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.24",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","OPT","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details.","",""
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","PM Sampling","Maximum Buffer Size","Kbyte","524.29",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","PM Sampling","Dropped Samples","sample","0",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","PM Sampling","Maximum Sampling Interval","cycle","20,000",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","PM Sampling","# Pass Groups","","4",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.43",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.01",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","12.23",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.49",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","12.23",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","All compute pipelines are under-utilized. Either this kernel is very small or it doesn't issue enough warps per scheduler. Check the Launch Statistics and Scheduler Statistics sections for further details.","local","94.9"
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","4.10",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.52",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","0.59",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","4.49",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","75.08",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.21",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L2 might not be optimal. On average, only 29.9 of the 32 bytes transmitted per sector are utilized by each thread. This applies to the 92.9% of sectors missed in L1TEX. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","0.03566"
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","13.48",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.13",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","86.52",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","6.07",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.25",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 7.4 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 6.07 active warps per scheduler, but only an average of 0.25 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, reduce the time the active warps are stalled by inspecting the top stall reasons on the Warp State Statistics and Source Counters sections.","local","86.52"
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","45.01",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","50.79",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","31.89",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","29.40",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 17.9 cycles being stalled waiting for an immediate constant cache (IMC) miss. A read from constant memory costs one memory read from device memory only on a cache miss; otherwise, it just costs one read from the constant cache. Immediate constants are encoded into the SASS instruction as 'c[bank][offset]'. Accesses to different addresses by threads within a warp are serialized, thus the cost scales linearly with the number of unique addresses read by all threads within a warp. As such, the constant cache is best when threads in the same warp access only a few distinct locations. If all threads of a warp access the same location, then constant memory can be as fast as a register access. This stall type represents about 39.7% of the total average of 45.0 cycles between issuing two instructions.","global","39.72"
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 14.6 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory. This stall type represents about 32.5% of the total average of 45.0 cycles between issuing two instructions.","global","32.52"
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","9.61",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","2,152",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","10.84",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","2,428",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","OPT","This kernel executes 0 fused and 42 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","2.548"
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1,024",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","16",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","32.77",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","Kbyte/block","8.19",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","# SMs","SM","56",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2,048",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Uses Green Context","","0",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","OPT","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 56 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations.","global","96.43"
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","4",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","3",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","64",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","100",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","34.78",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","22.26",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","AchievedOccupancy","OPT","The difference between calculated theoretical (100.0%) and measured achieved occupancy (34.8%) can be the result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy.","global","65.22"
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","26.17",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","141,312",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","88.64",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","252,238",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","538.15",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","209,232",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","88.64",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","252,238",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","80.44",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","1,008,952",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WorkloadDistribution","","","","WorkloadImbalance","OPT","One or more L2 Slices have a much lower number of active cycles than the average number of active cycles. Maximum instance value is 66.57% above the average, while the minimum instance value is 85.69% below the average.","global","8.219"
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.17",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","362",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","96.83",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.02",
"15","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 0:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 92 excessive sectors (11% of the total 810 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","1.402"
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.19",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","917.63",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","4,435",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","0.54",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","0.45",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","4.83",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","15.16",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","0.54",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","85.98",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.24",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","OPT","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details.","",""
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","PM Sampling","Maximum Buffer Size","Kbyte","524.29",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","PM Sampling","Dropped Samples","sample","0",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","PM Sampling","Maximum Sampling Interval","cycle","20,000",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","PM Sampling","# Pass Groups","","4",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.45",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.01",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","12.61",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.50",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","12.61",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","All compute pipelines are under-utilized. Either this kernel is very small or it doesn't issue enough warps per scheduler. Check the Launch Statistics and Scheduler Statistics sections for further details.","local","94.75"
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","4.13",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.54",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","0.53",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","4.49",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","75.86",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.21",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L2 might not be optimal. On average, only 29.9 of the 32 bytes transmitted per sector are utilized by each thread. This applies to the 92.9% of sectors missed in L1TEX. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","0.03308"
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","13.40",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.13",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","86.60",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","6.06",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.25",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 7.5 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 6.06 active warps per scheduler, but only an average of 0.25 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, reduce the time the active warps are stalled by inspecting the top stall reasons on the Warp State Statistics and Source Counters sections.","local","86.6"
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","45.25",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","51.05",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","31.89",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","29.40",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 17.4 cycles being stalled waiting for an immediate constant cache (IMC) miss. A read from constant memory costs one memory read from device memory only on a cache miss; otherwise, it just costs one read from the constant cache. Immediate constants are encoded into the SASS instruction as 'c[bank][offset]'. Accesses to different addresses by threads within a warp are serialized, thus the cost scales linearly with the number of unique addresses read by all threads within a warp. As such, the constant cache is best when threads in the same warp access only a few distinct locations. If all threads of a warp access the same location, then constant memory can be as fast as a register access. This stall type represents about 38.4% of the total average of 45.2 cycles between issuing two instructions.","global","38.4"
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 14.5 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory. This stall type represents about 32.1% of the total average of 45.2 cycles between issuing two instructions.","global","32.11"
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","9.61",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","2,152",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","10.84",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","2,428",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","OPT","This kernel executes 0 fused and 42 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","2.627"
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1,024",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","16",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","32.77",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","Kbyte/block","8.19",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","# SMs","SM","56",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2,048",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Uses Green Context","","0",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","OPT","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 56 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations.","global","96.43"
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","4",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","3",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","64",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","100",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","36.04",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","23.07",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","AchievedOccupancy","OPT","The difference between calculated theoretical (100.0%) and measured achieved occupancy (36.0%) can be the result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy.","global","63.96"
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","26",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","138,240",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","85.98",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","248,304",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","535.52",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","205,920",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","85.98",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","248,304",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","80.91",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","993,216",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WorkloadDistribution","","","","WorkloadImbalance","OPT","One or more L2 Slices have a much lower number of active cycles than the average number of active cycles. Maximum instance value is 66.15% above the average, while the minimum instance value is 85.43% below the average.","global","8.257"
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.17",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","362",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","96.83",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.02",
"16","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 1:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 92 excessive sectors (11% of the total 810 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","1.418"
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Frequency","cycle/nsecond","1.21",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Frequency","cycle/usecond","922.19",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Elapsed Cycles","cycle","4,398",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Memory Throughput","%","0.58",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","DRAM Throughput","%","0.45",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Duration","usecond","4.77",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L1/TEX Cache Throughput","%","16.35",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","L2 Cache Throughput","%","0.58",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","SM Active Cycles","cycle","85.82",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU Speed Of Light Throughput","Compute (SM) Throughput","%","0.25",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight","","","","SOLBottleneck","OPT","This kernel grid is too small to fill the available resources on this device, resulting in only 0.0 full waves across all SMs. Look at Launch Statistics for more details.","",""
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SpeedOfLight_RooflineChart","","","","SOLFPRoofline","INF","The ratio of peak float (fp32) to double (fp64) performance on this device is 2:1. The kernel achieved  close to 0% of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for more details on roofline analysis.","",""
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","PM Sampling","Maximum Buffer Size","Kbyte","524.29",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","PM Sampling","Dropped Samples","sample","0",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","PM Sampling","Maximum Sampling Interval","cycle","20,000",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","PM Sampling","# Pass Groups","","4",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Active","inst/cycle","0.45",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Executed Ipc Elapsed","inst/cycle","0.01",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issue Slots Busy","%","12.63",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","Issued Ipc Active","inst/cycle","0.51",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Compute Workload Analysis","SM Busy","%","12.63",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","ComputeWorkloadAnalysis","","","","HighPipeUtilization","OPT","All compute pipelines are under-utilized. Either this kernel is very small or it doesn't issue enough warps per scheduler. Check the Launch Statistics and Scheduler Statistics sections for further details.","local","94.74"
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Memory Throughput","Gbyte/second","4.21",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Busy","%","0.58",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Max Bandwidth","%","0.53",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L1/TEX Hit Rate","%","4.49",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Success Rate","%","0",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Compression Ratio","","0",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","L2 Hit Rate","%","72.17",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Memory Workload Analysis","Mem Pipes Busy","%","0.21",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","MemoryWorkloadAnalysis_Tables","","","","MemoryCacheAccessPattern","OPT","The memory access pattern for global loads from L2 might not be optimal. On average, only 29.9 of the 32 bytes transmitted per sector are utilized by each thread. This applies to the 92.9% of sectors missed in L1TEX. This could possibly be caused by a stride between threads. Check the Source Counters section for uncoalesced global loads.","global","0.03531"
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","One or More Eligible","%","13.24",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Issued Warp Per Scheduler","","0.13",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","No Eligible","%","86.76",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Active Warps Per Scheduler","warp","6.07",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Scheduler Statistics","Eligible Warps Per Scheduler","warp","0.25",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SchedulerStats","","","","IssueSlotUtilization","OPT","Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only issues an instruction every 7.6 cycles. This might leave hardware resources underutilized and may lead to less optimal performance. Out of the maximum of 16 warps per scheduler, this kernel allocates an average of 6.07 active warps per scheduler, but only an average of 0.25 warps were eligible per cycle. Eligible warps are the subset of active warps that are ready to issue their next instruction. Every cycle with no eligible warp results in no instruction being issued and the issue slot remains unused. To increase the number of eligible warps, reduce the time the active warps are stalled by inspecting the top stall reasons on the Warp State Statistics and Source Counters sections.","local","86.76"
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Issued Instruction","cycle","45.86",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Warp Cycles Per Executed Instruction","cycle","51.74",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Active Threads Per Warp","","31.89",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Warp State Statistics","Avg. Not Predicated Off Threads Per Warp","","29.40",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 17.3 cycles being stalled waiting for an immediate constant cache (IMC) miss. A read from constant memory costs one memory read from device memory only on a cache miss; otherwise, it just costs one read from the constant cache. Immediate constants are encoded into the SASS instruction as 'c[bank][offset]'. Accesses to different addresses by threads within a warp are serialized, thus the cost scales linearly with the number of unique addresses read by all threads within a warp. As such, the constant cache is best when threads in the same warp access only a few distinct locations. If all threads of a warp access the same location, then constant memory can be as fast as a register access. This stall type represents about 37.6% of the total average of 45.9 cycles between issuing two instructions.","global","37.63"
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","OPT","On average, each warp of this kernel spends 16.6 cycles being stalled waiting for a scoreboard dependency on a L1TEX (local, global, surface, texture) operation. Find the instruction producing the data being waited upon to identify the culprit. To reduce the number of cycles waiting on L1TEX data accesses verify the memory access patterns are optimal for the target architecture, attempt to increase cache hit rates by increasing data locality (coalescing), or by changing the cache configuration. Consider moving frequently used data to shared memory. This stall type represents about 36.2% of the total average of 45.9 cycles between issuing two instructions.","global","36.19"
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WarpStateStats","","","","CPIStall","INF","Check the Warp Stall Sampling (All Samples) table for the top stall locations in your source based on sampling data. The Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-reference) provides more details on each stall reason.","",""
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Executed Instructions Per Scheduler","inst","9.61",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Executed Instructions","inst","2,152",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Avg. Issued Instructions Per Scheduler","inst","10.84",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Instruction Statistics","Issued Instructions","inst","2,428",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","InstructionStats","","","","FPInstructions","OPT","This kernel executes 0 fused and 42 non-fused FP32 instructions. By converting pairs of non-fused instructions to their fused (https://docs.nvidia.com/cuda/floating-point/#cuda-and-floating-point), higher-throughput equivalent, the achieved FP32 performance could be increased by up to 50% (relative to its current performance). Check the Source page to identify where this kernel executes FP32 instructions.","global","2.632"
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Block Size","","1,024",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Function Cache Configuration","","CachePreferNone",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Grid Size","","2",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Registers Per Thread","register/thread","16",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Shared Memory Configuration Size","Kbyte","32.77",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Driver Shared Memory Per Block","Kbyte/block","1.02",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Dynamic Shared Memory Per Block","Kbyte/block","8.19",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Static Shared Memory Per Block","byte/block","0",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","# SMs","SM","56",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Threads","thread","2,048",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Uses Green Context","","0",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Launch Statistics","Waves Per SM","","0.02",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","LaunchStats","","","","LaunchConfiguration","OPT","The grid for this launch is configured to execute only 2 blocks, which is less than the GPU's 56 multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel concurrently with other workloads, consider reducing the block size to have at least one block per multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model) description for more details on launch configurations.","global","96.43"
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit SM","block","32",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Registers","block","4",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Shared Mem","block","3",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Block Limit Warps","block","2",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Active Warps per SM","warp","64",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Theoretical Occupancy","%","100",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Occupancy","%","36.59",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","Achieved Active Warps Per SM","warp","23.42",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Occupancy","","","","AchievedOccupancy","OPT","The difference between calculated theoretical (100.0%) and measured achieved occupancy (36.6%) can be the result of warp scheduling overheads or workload imbalances during the kernel execution. Load imbalances can occur between warps within a block as well as across blocks of the same kernel. See the CUDA Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for more details on optimizing occupancy.","global","63.41"
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average DRAM Active Cycles","cycle","26.17",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total DRAM Elapsed Cycles","cycle","138,240",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L1 Active Cycles","cycle","85.82",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L1 Elapsed Cycles","cycle","246,232",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average L2 Active Cycles","cycle","539.92",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total L2 Elapsed Cycles","cycle","204,288",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SM Active Cycles","cycle","85.82",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SM Elapsed Cycles","cycle","246,232",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Average SMSP Active Cycles","cycle","81.87",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","GPU and Memory Workload Distribution","Total SMSP Elapsed Cycles","cycle","984,928",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","WorkloadDistribution","","","","WorkloadImbalance","OPT","One or more L2 Slices have a much lower number of active cycles than the average number of active cycles. Maximum instance value is 66.96% above the average, while the minimum instance value is 85.74% below the average.","global","8.494"
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions Ratio","%","0.17",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Instructions","inst","362",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Branch Efficiency","%","96.83",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","Source Counters","Avg. Divergent Branches","","0.02",
"17","230394","SpMV","127.0.0.1","230394  ""<default domain>:COO_OLD SortC Cities.mtx 1 1024 2:none:none:none:none:none:none"" ","","multiplicationCOO_OLD(int *, int *, float *, float *, float *, int)","1","7","(1024, 1, 1)","(2, 1, 1)","0","8.0","SourceCounters","","","","UncoalescedGlobalAccess","OPT","This kernel has uncoalesced global accesses resulting in a total of 92 excessive sectors (11% of the total 810 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source locations. The CUDA Programming Guide (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) has additional information on reducing uncoalesced device memory accesses.","global","1.441"
